//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TraveLineTransitServices {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet : System.Data.DataSet {
        
        private CorrectiveActionsDataTable tableCorrectiveActions;
        
        private CustomerDataTable tableCustomer;
        
        private DepartmentDataTable tableDepartment;
        
        private DriverDataTable tableDriver;
        
        private EmployeeDataTable tableEmployee;
        
        private FeedBackDataTable tableFeedBack;
        
        private InvestigationDetailsDataTable tableInvestigationDetails;
        
        private CurrentEmployeeDataTable tableCurrentEmployee;
        
        private FeedBackDataDataTable tableFeedBackData;
        
        private ComplaintDataTable tableComplaint;
        
        private InvestigationDetailsDataDataTable tableInvestigationDetailsData;
        
        private CorrectiveActionsDataDataTable tableCorrectiveActionsData;
        
        private ServicesDetailsDataTable tableServicesDetails;
        
        private System.Data.DataRelation relationFK__Correctiv__FeedB__08EA5793;
        
        private System.Data.DataRelation relationFK__Correctiv__Repre__09DE7BCC;
        
        private System.Data.DataRelation relationFK__Employee__Depart__7B905C75;
        
        private System.Data.DataRelation relationFK__FeedBack__Assign__03317E3D;
        
        private System.Data.DataRelation relationFK__FeedBack__Assign__0425A276;
        
        private System.Data.DataRelation relationFK__FeedBack__Custom__00551192;
        
        private System.Data.DataRelation relationFK__FeedBack__Depart__023D5A04;
        
        private System.Data.DataRelation relationFK__FeedBack__Repres__014935CB;
        
        private System.Data.DataRelation relationFK__Investiga__Drive__07020F21;
        
        private System.Data.DataRelation relationFK__Investiga__FeedB__060DEAE8;
        
        private System.Data.DataRelation relationFK__Employee__Depart__7B905C751;
        
        private System.Data.DataRelation relationFK__FeedBack__Depart__023D5A041;
        
        private System.Data.DataRelation relationFK__Correctiv__FeedB__08EA57931;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CorrectiveActions"] != null)) {
                    base.Tables.Add(new CorrectiveActionsDataTable(ds.Tables["CorrectiveActions"]));
                }
                if ((ds.Tables["Customer"] != null)) {
                    base.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }
                if ((ds.Tables["Department"] != null)) {
                    base.Tables.Add(new DepartmentDataTable(ds.Tables["Department"]));
                }
                if ((ds.Tables["Driver"] != null)) {
                    base.Tables.Add(new DriverDataTable(ds.Tables["Driver"]));
                }
                if ((ds.Tables["Employee"] != null)) {
                    base.Tables.Add(new EmployeeDataTable(ds.Tables["Employee"]));
                }
                if ((ds.Tables["FeedBack"] != null)) {
                    base.Tables.Add(new FeedBackDataTable(ds.Tables["FeedBack"]));
                }
                if ((ds.Tables["InvestigationDetails"] != null)) {
                    base.Tables.Add(new InvestigationDetailsDataTable(ds.Tables["InvestigationDetails"]));
                }
                if ((ds.Tables["CurrentEmployee"] != null)) {
                    base.Tables.Add(new CurrentEmployeeDataTable(ds.Tables["CurrentEmployee"]));
                }
                if ((ds.Tables["FeedBackData"] != null)) {
                    base.Tables.Add(new FeedBackDataDataTable(ds.Tables["FeedBackData"]));
                }
                if ((ds.Tables["Complaint"] != null)) {
                    base.Tables.Add(new ComplaintDataTable(ds.Tables["Complaint"]));
                }
                if ((ds.Tables["InvestigationDetailsData"] != null)) {
                    base.Tables.Add(new InvestigationDetailsDataDataTable(ds.Tables["InvestigationDetailsData"]));
                }
                if ((ds.Tables["CorrectiveActionsData"] != null)) {
                    base.Tables.Add(new CorrectiveActionsDataDataTable(ds.Tables["CorrectiveActionsData"]));
                }
                if ((ds.Tables["ServicesDetails"] != null)) {
                    base.Tables.Add(new ServicesDetailsDataTable(ds.Tables["ServicesDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CorrectiveActionsDataTable CorrectiveActions {
            get {
                return this.tableCorrectiveActions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerDataTable Customer {
            get {
                return this.tableCustomer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DepartmentDataTable Department {
            get {
                return this.tableDepartment;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DriverDataTable Driver {
            get {
                return this.tableDriver;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeDataTable Employee {
            get {
                return this.tableEmployee;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FeedBackDataTable FeedBack {
            get {
                return this.tableFeedBack;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvestigationDetailsDataTable InvestigationDetails {
            get {
                return this.tableInvestigationDetails;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CurrentEmployeeDataTable CurrentEmployee {
            get {
                return this.tableCurrentEmployee;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FeedBackDataDataTable FeedBackData {
            get {
                return this.tableFeedBackData;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ComplaintDataTable Complaint {
            get {
                return this.tableComplaint;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvestigationDetailsDataDataTable InvestigationDetailsData {
            get {
                return this.tableInvestigationDetailsData;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CorrectiveActionsDataDataTable CorrectiveActionsData {
            get {
                return this.tableCorrectiveActionsData;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServicesDetailsDataTable ServicesDetails {
            get {
                return this.tableServicesDetails;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet cln = ((DataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CorrectiveActions"] != null)) {
                    base.Tables.Add(new CorrectiveActionsDataTable(ds.Tables["CorrectiveActions"]));
                }
                if ((ds.Tables["Customer"] != null)) {
                    base.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }
                if ((ds.Tables["Department"] != null)) {
                    base.Tables.Add(new DepartmentDataTable(ds.Tables["Department"]));
                }
                if ((ds.Tables["Driver"] != null)) {
                    base.Tables.Add(new DriverDataTable(ds.Tables["Driver"]));
                }
                if ((ds.Tables["Employee"] != null)) {
                    base.Tables.Add(new EmployeeDataTable(ds.Tables["Employee"]));
                }
                if ((ds.Tables["FeedBack"] != null)) {
                    base.Tables.Add(new FeedBackDataTable(ds.Tables["FeedBack"]));
                }
                if ((ds.Tables["InvestigationDetails"] != null)) {
                    base.Tables.Add(new InvestigationDetailsDataTable(ds.Tables["InvestigationDetails"]));
                }
                if ((ds.Tables["CurrentEmployee"] != null)) {
                    base.Tables.Add(new CurrentEmployeeDataTable(ds.Tables["CurrentEmployee"]));
                }
                if ((ds.Tables["FeedBackData"] != null)) {
                    base.Tables.Add(new FeedBackDataDataTable(ds.Tables["FeedBackData"]));
                }
                if ((ds.Tables["Complaint"] != null)) {
                    base.Tables.Add(new ComplaintDataTable(ds.Tables["Complaint"]));
                }
                if ((ds.Tables["InvestigationDetailsData"] != null)) {
                    base.Tables.Add(new InvestigationDetailsDataDataTable(ds.Tables["InvestigationDetailsData"]));
                }
                if ((ds.Tables["CorrectiveActionsData"] != null)) {
                    base.Tables.Add(new CorrectiveActionsDataDataTable(ds.Tables["CorrectiveActionsData"]));
                }
                if ((ds.Tables["ServicesDetails"] != null)) {
                    base.Tables.Add(new ServicesDetailsDataTable(ds.Tables["ServicesDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCorrectiveActions = ((CorrectiveActionsDataTable)(base.Tables["CorrectiveActions"]));
            if ((initTable == true)) {
                if ((this.tableCorrectiveActions != null)) {
                    this.tableCorrectiveActions.InitVars();
                }
            }
            this.tableCustomer = ((CustomerDataTable)(base.Tables["Customer"]));
            if ((initTable == true)) {
                if ((this.tableCustomer != null)) {
                    this.tableCustomer.InitVars();
                }
            }
            this.tableDepartment = ((DepartmentDataTable)(base.Tables["Department"]));
            if ((initTable == true)) {
                if ((this.tableDepartment != null)) {
                    this.tableDepartment.InitVars();
                }
            }
            this.tableDriver = ((DriverDataTable)(base.Tables["Driver"]));
            if ((initTable == true)) {
                if ((this.tableDriver != null)) {
                    this.tableDriver.InitVars();
                }
            }
            this.tableEmployee = ((EmployeeDataTable)(base.Tables["Employee"]));
            if ((initTable == true)) {
                if ((this.tableEmployee != null)) {
                    this.tableEmployee.InitVars();
                }
            }
            this.tableFeedBack = ((FeedBackDataTable)(base.Tables["FeedBack"]));
            if ((initTable == true)) {
                if ((this.tableFeedBack != null)) {
                    this.tableFeedBack.InitVars();
                }
            }
            this.tableInvestigationDetails = ((InvestigationDetailsDataTable)(base.Tables["InvestigationDetails"]));
            if ((initTable == true)) {
                if ((this.tableInvestigationDetails != null)) {
                    this.tableInvestigationDetails.InitVars();
                }
            }
            this.tableCurrentEmployee = ((CurrentEmployeeDataTable)(base.Tables["CurrentEmployee"]));
            if ((initTable == true)) {
                if ((this.tableCurrentEmployee != null)) {
                    this.tableCurrentEmployee.InitVars();
                }
            }
            this.tableFeedBackData = ((FeedBackDataDataTable)(base.Tables["FeedBackData"]));
            if ((initTable == true)) {
                if ((this.tableFeedBackData != null)) {
                    this.tableFeedBackData.InitVars();
                }
            }
            this.tableComplaint = ((ComplaintDataTable)(base.Tables["Complaint"]));
            if ((initTable == true)) {
                if ((this.tableComplaint != null)) {
                    this.tableComplaint.InitVars();
                }
            }
            this.tableInvestigationDetailsData = ((InvestigationDetailsDataDataTable)(base.Tables["InvestigationDetailsData"]));
            if ((initTable == true)) {
                if ((this.tableInvestigationDetailsData != null)) {
                    this.tableInvestigationDetailsData.InitVars();
                }
            }
            this.tableCorrectiveActionsData = ((CorrectiveActionsDataDataTable)(base.Tables["CorrectiveActionsData"]));
            if ((initTable == true)) {
                if ((this.tableCorrectiveActionsData != null)) {
                    this.tableCorrectiveActionsData.InitVars();
                }
            }
            this.tableServicesDetails = ((ServicesDetailsDataTable)(base.Tables["ServicesDetails"]));
            if ((initTable == true)) {
                if ((this.tableServicesDetails != null)) {
                    this.tableServicesDetails.InitVars();
                }
            }
            this.relationFK__Correctiv__FeedB__08EA5793 = this.Relations["FK__Correctiv__FeedB__08EA5793"];
            this.relationFK__Correctiv__Repre__09DE7BCC = this.Relations["FK__Correctiv__Repre__09DE7BCC"];
            this.relationFK__Employee__Depart__7B905C75 = this.Relations["FK__Employee__Depart__7B905C75"];
            this.relationFK__FeedBack__Assign__03317E3D = this.Relations["FK__FeedBack__Assign__03317E3D"];
            this.relationFK__FeedBack__Assign__0425A276 = this.Relations["FK__FeedBack__Assign__0425A276"];
            this.relationFK__FeedBack__Custom__00551192 = this.Relations["FK__FeedBack__Custom__00551192"];
            this.relationFK__FeedBack__Depart__023D5A04 = this.Relations["FK__FeedBack__Depart__023D5A04"];
            this.relationFK__FeedBack__Repres__014935CB = this.Relations["FK__FeedBack__Repres__014935CB"];
            this.relationFK__Investiga__Drive__07020F21 = this.Relations["FK__Investiga__Drive__07020F21"];
            this.relationFK__Investiga__FeedB__060DEAE8 = this.Relations["FK__Investiga__FeedB__060DEAE8"];
            this.relationFK__Employee__Depart__7B905C751 = this.Relations["FK__Employee__Depart__7B905C751"];
            this.relationFK__FeedBack__Depart__023D5A041 = this.Relations["FK__FeedBack__Depart__023D5A041"];
            this.relationFK__Correctiv__FeedB__08EA57931 = this.Relations["FK__Correctiv__FeedB__08EA57931"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCorrectiveActions = new CorrectiveActionsDataTable();
            base.Tables.Add(this.tableCorrectiveActions);
            this.tableCustomer = new CustomerDataTable();
            base.Tables.Add(this.tableCustomer);
            this.tableDepartment = new DepartmentDataTable();
            base.Tables.Add(this.tableDepartment);
            this.tableDriver = new DriverDataTable();
            base.Tables.Add(this.tableDriver);
            this.tableEmployee = new EmployeeDataTable();
            base.Tables.Add(this.tableEmployee);
            this.tableFeedBack = new FeedBackDataTable();
            base.Tables.Add(this.tableFeedBack);
            this.tableInvestigationDetails = new InvestigationDetailsDataTable();
            base.Tables.Add(this.tableInvestigationDetails);
            this.tableCurrentEmployee = new CurrentEmployeeDataTable();
            base.Tables.Add(this.tableCurrentEmployee);
            this.tableFeedBackData = new FeedBackDataDataTable();
            base.Tables.Add(this.tableFeedBackData);
            this.tableComplaint = new ComplaintDataTable();
            base.Tables.Add(this.tableComplaint);
            this.tableInvestigationDetailsData = new InvestigationDetailsDataDataTable();
            base.Tables.Add(this.tableInvestigationDetailsData);
            this.tableCorrectiveActionsData = new CorrectiveActionsDataDataTable();
            base.Tables.Add(this.tableCorrectiveActionsData);
            this.tableServicesDetails = new ServicesDetailsDataTable();
            base.Tables.Add(this.tableServicesDetails);
            this.relationFK__Correctiv__FeedB__08EA5793 = new System.Data.DataRelation("FK__Correctiv__FeedB__08EA5793", new System.Data.DataColumn[] {
                        this.tableFeedBack.FeedBackIDColumn}, new System.Data.DataColumn[] {
                        this.tableCorrectiveActions.FeedBackIDColumn}, false);
            this.Relations.Add(this.relationFK__Correctiv__FeedB__08EA5793);
            this.relationFK__Correctiv__Repre__09DE7BCC = new System.Data.DataRelation("FK__Correctiv__Repre__09DE7BCC", new System.Data.DataColumn[] {
                        this.tableEmployee.EmployeeIDColumn}, new System.Data.DataColumn[] {
                        this.tableCorrectiveActions.RepresentativeIDColumn}, false);
            this.Relations.Add(this.relationFK__Correctiv__Repre__09DE7BCC);
            this.relationFK__Employee__Depart__7B905C75 = new System.Data.DataRelation("FK__Employee__Depart__7B905C75", new System.Data.DataColumn[] {
                        this.tableDepartment.DepartmentIDColumn}, new System.Data.DataColumn[] {
                        this.tableEmployee.DepartmentIDColumn}, false);
            this.Relations.Add(this.relationFK__Employee__Depart__7B905C75);
            this.relationFK__FeedBack__Assign__03317E3D = new System.Data.DataRelation("FK__FeedBack__Assign__03317E3D", new System.Data.DataColumn[] {
                        this.tableEmployee.EmployeeIDColumn}, new System.Data.DataColumn[] {
                        this.tableFeedBack.AssignerIDColumn}, false);
            this.Relations.Add(this.relationFK__FeedBack__Assign__03317E3D);
            this.relationFK__FeedBack__Assign__0425A276 = new System.Data.DataRelation("FK__FeedBack__Assign__0425A276", new System.Data.DataColumn[] {
                        this.tableEmployee.EmployeeIDColumn}, new System.Data.DataColumn[] {
                        this.tableFeedBack.AssigneeIDColumn}, false);
            this.Relations.Add(this.relationFK__FeedBack__Assign__0425A276);
            this.relationFK__FeedBack__Custom__00551192 = new System.Data.DataRelation("FK__FeedBack__Custom__00551192", new System.Data.DataColumn[] {
                        this.tableCustomer.CustomerIDColumn}, new System.Data.DataColumn[] {
                        this.tableFeedBack.CustomerIDColumn}, false);
            this.Relations.Add(this.relationFK__FeedBack__Custom__00551192);
            this.relationFK__FeedBack__Depart__023D5A04 = new System.Data.DataRelation("FK__FeedBack__Depart__023D5A04", new System.Data.DataColumn[] {
                        this.tableDepartment.DepartmentIDColumn}, new System.Data.DataColumn[] {
                        this.tableFeedBack.DepartmentIDColumn}, false);
            this.Relations.Add(this.relationFK__FeedBack__Depart__023D5A04);
            this.relationFK__FeedBack__Repres__014935CB = new System.Data.DataRelation("FK__FeedBack__Repres__014935CB", new System.Data.DataColumn[] {
                        this.tableEmployee.EmployeeIDColumn}, new System.Data.DataColumn[] {
                        this.tableFeedBack.RepresentativeIDColumn}, false);
            this.Relations.Add(this.relationFK__FeedBack__Repres__014935CB);
            this.relationFK__Investiga__Drive__07020F21 = new System.Data.DataRelation("FK__Investiga__Drive__07020F21", new System.Data.DataColumn[] {
                        this.tableDriver.DriverIDColumn}, new System.Data.DataColumn[] {
                        this.tableInvestigationDetails.DriverIDColumn}, false);
            this.Relations.Add(this.relationFK__Investiga__Drive__07020F21);
            this.relationFK__Investiga__FeedB__060DEAE8 = new System.Data.DataRelation("FK__Investiga__FeedB__060DEAE8", new System.Data.DataColumn[] {
                        this.tableFeedBack.FeedBackIDColumn}, new System.Data.DataColumn[] {
                        this.tableInvestigationDetails.FeedBackIDColumn}, false);
            this.Relations.Add(this.relationFK__Investiga__FeedB__060DEAE8);
            this.relationFK__Employee__Depart__7B905C751 = new System.Data.DataRelation("FK__Employee__Depart__7B905C751", new System.Data.DataColumn[] {
                        this.tableCurrentEmployee.DepartmentIDColumn}, new System.Data.DataColumn[] {
                        this.tableEmployee.DepartmentIDColumn}, false);
            this.Relations.Add(this.relationFK__Employee__Depart__7B905C751);
            this.relationFK__FeedBack__Depart__023D5A041 = new System.Data.DataRelation("FK__FeedBack__Depart__023D5A041", new System.Data.DataColumn[] {
                        this.tableCurrentEmployee.DepartmentIDColumn}, new System.Data.DataColumn[] {
                        this.tableFeedBack.DepartmentIDColumn}, false);
            this.Relations.Add(this.relationFK__FeedBack__Depart__023D5A041);
            this.relationFK__Correctiv__FeedB__08EA57931 = new System.Data.DataRelation("FK__Correctiv__FeedB__08EA57931", new System.Data.DataColumn[] {
                        this.tableFeedBack.FeedBackIDColumn}, new System.Data.DataColumn[] {
                        this.tableCorrectiveActionsData.FeedBackIDColumn}, false);
            this.Relations.Add(this.relationFK__Correctiv__FeedB__08EA57931);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCorrectiveActions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDepartment() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDriver() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployee() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFeedBack() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvestigationDetails() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCurrentEmployee() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFeedBackData() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeComplaint() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvestigationDetailsData() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCorrectiveActionsData() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServicesDetails() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet ds = new DataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void CorrectiveActionsRowChangeEventHandler(object sender, CorrectiveActionsRowChangeEvent e);
        
        public delegate void CustomerRowChangeEventHandler(object sender, CustomerRowChangeEvent e);
        
        public delegate void DepartmentRowChangeEventHandler(object sender, DepartmentRowChangeEvent e);
        
        public delegate void DriverRowChangeEventHandler(object sender, DriverRowChangeEvent e);
        
        public delegate void EmployeeRowChangeEventHandler(object sender, EmployeeRowChangeEvent e);
        
        public delegate void FeedBackRowChangeEventHandler(object sender, FeedBackRowChangeEvent e);
        
        public delegate void InvestigationDetailsRowChangeEventHandler(object sender, InvestigationDetailsRowChangeEvent e);
        
        public delegate void CurrentEmployeeRowChangeEventHandler(object sender, CurrentEmployeeRowChangeEvent e);
        
        public delegate void FeedBackDataRowChangeEventHandler(object sender, FeedBackDataRowChangeEvent e);
        
        public delegate void ComplaintRowChangeEventHandler(object sender, ComplaintRowChangeEvent e);
        
        public delegate void InvestigationDetailsDataRowChangeEventHandler(object sender, InvestigationDetailsDataRowChangeEvent e);
        
        public delegate void CorrectiveActionsDataRowChangeEventHandler(object sender, CorrectiveActionsDataRowChangeEvent e);
        
        public delegate void ServicesDetailsRowChangeEventHandler(object sender, ServicesDetailsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CorrectiveActionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeedBackID;
            
            private System.Data.DataColumn columnActionDetails;
            
            private System.Data.DataColumn columnRepresentativeID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsDataTable() {
                this.TableName = "CorrectiveActions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CorrectiveActionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CorrectiveActionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackIDColumn {
                get {
                    return this.columnFeedBackID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActionDetailsColumn {
                get {
                    return this.columnActionDetails;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepresentativeIDColumn {
                get {
                    return this.columnRepresentativeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsRow this[int index] {
                get {
                    return ((CorrectiveActionsRow)(this.Rows[index]));
                }
            }
            
            public event CorrectiveActionsRowChangeEventHandler CorrectiveActionsRowChanging;
            
            public event CorrectiveActionsRowChangeEventHandler CorrectiveActionsRowChanged;
            
            public event CorrectiveActionsRowChangeEventHandler CorrectiveActionsRowDeleting;
            
            public event CorrectiveActionsRowChangeEventHandler CorrectiveActionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCorrectiveActionsRow(CorrectiveActionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsRow AddCorrectiveActionsRow(FeedBackRow parentFeedBackRowByFK__Correctiv__FeedB__08EA5793, string ActionDetails, EmployeeRow parentEmployeeRowByFK__Correctiv__Repre__09DE7BCC) {
                CorrectiveActionsRow rowCorrectiveActionsRow = ((CorrectiveActionsRow)(this.NewRow()));
                rowCorrectiveActionsRow.ItemArray = new object[] {
                        parentFeedBackRowByFK__Correctiv__FeedB__08EA5793[0],
                        ActionDetails,
                        parentEmployeeRowByFK__Correctiv__Repre__09DE7BCC[0]};
                this.Rows.Add(rowCorrectiveActionsRow);
                return rowCorrectiveActionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CorrectiveActionsDataTable cln = ((CorrectiveActionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CorrectiveActionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeedBackID = base.Columns["FeedBackID"];
                this.columnActionDetails = base.Columns["ActionDetails"];
                this.columnRepresentativeID = base.Columns["RepresentativeID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeedBackID = new System.Data.DataColumn("FeedBackID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackID);
                this.columnActionDetails = new System.Data.DataColumn("ActionDetails", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnActionDetails);
                this.columnRepresentativeID = new System.Data.DataColumn("RepresentativeID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepresentativeID);
                this.columnFeedBackID.AllowDBNull = false;
                this.columnFeedBackID.MaxLength = 5;
                this.columnActionDetails.AllowDBNull = false;
                this.columnActionDetails.MaxLength = 1073741823;
                this.columnRepresentativeID.AllowDBNull = false;
                this.columnRepresentativeID.MaxLength = 4;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsRow NewCorrectiveActionsRow() {
                return ((CorrectiveActionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CorrectiveActionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CorrectiveActionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CorrectiveActionsRowChanged != null)) {
                    this.CorrectiveActionsRowChanged(this, new CorrectiveActionsRowChangeEvent(((CorrectiveActionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CorrectiveActionsRowChanging != null)) {
                    this.CorrectiveActionsRowChanging(this, new CorrectiveActionsRowChangeEvent(((CorrectiveActionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CorrectiveActionsRowDeleted != null)) {
                    this.CorrectiveActionsRowDeleted(this, new CorrectiveActionsRowChangeEvent(((CorrectiveActionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CorrectiveActionsRowDeleting != null)) {
                    this.CorrectiveActionsRowDeleting(this, new CorrectiveActionsRowChangeEvent(((CorrectiveActionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCorrectiveActionsRow(CorrectiveActionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CorrectiveActionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCustomerID;
            
            private System.Data.DataColumn columnCustomerName;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnCity;
            
            private System.Data.DataColumn columnState;
            
            private System.Data.DataColumn columnZipCode;
            
            private System.Data.DataColumn columnEmail;
            
            private System.Data.DataColumn columnContactNumber;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerDataTable() {
                this.TableName = "Customer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContactNumberColumn {
                get {
                    return this.columnContactNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow this[int index] {
                get {
                    return ((CustomerRow)(this.Rows[index]));
                }
            }
            
            public event CustomerRowChangeEventHandler CustomerRowChanging;
            
            public event CustomerRowChangeEventHandler CustomerRowChanged;
            
            public event CustomerRowChangeEventHandler CustomerRowDeleting;
            
            public event CustomerRowChangeEventHandler CustomerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerRow(CustomerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow AddCustomerRow(string CustomerID, string CustomerName, string Address, string City, string State, string ZipCode, string Email, string ContactNumber) {
                CustomerRow rowCustomerRow = ((CustomerRow)(this.NewRow()));
                rowCustomerRow.ItemArray = new object[] {
                        CustomerID,
                        CustomerName,
                        Address,
                        City,
                        State,
                        ZipCode,
                        Email,
                        ContactNumber};
                this.Rows.Add(rowCustomerRow);
                return rowCustomerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow FindByCustomerID(string CustomerID) {
                return ((CustomerRow)(this.Rows.Find(new object[] {
                            CustomerID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CustomerDataTable cln = ((CustomerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CustomerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerID = base.Columns["CustomerID"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnEmail = base.Columns["Email"];
                this.columnContactNumber = base.Columns["ContactNumber"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerID = new System.Data.DataColumn("CustomerID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerID);
                this.columnCustomerName = new System.Data.DataColumn("CustomerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new System.Data.DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new System.Data.DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZipCode = new System.Data.DataColumn("ZipCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnEmail = new System.Data.DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnContactNumber = new System.Data.DataColumn("ContactNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactNumber);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCustomerID}, true));
                this.columnCustomerID.AllowDBNull = false;
                this.columnCustomerID.Unique = true;
                this.columnCustomerID.MaxLength = 4;
                this.columnCustomerName.AllowDBNull = false;
                this.columnCustomerName.MaxLength = 100;
                this.columnAddress.AllowDBNull = false;
                this.columnAddress.MaxLength = 100;
                this.columnCity.AllowDBNull = false;
                this.columnCity.MaxLength = 50;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 50;
                this.columnZipCode.AllowDBNull = false;
                this.columnZipCode.MaxLength = 20;
                this.columnEmail.AllowDBNull = false;
                this.columnEmail.MaxLength = 50;
                this.columnContactNumber.AllowDBNull = false;
                this.columnContactNumber.MaxLength = 20;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow NewCustomerRow() {
                return ((CustomerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CustomerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CustomerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerRowChanged != null)) {
                    this.CustomerRowChanged(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerRowChanging != null)) {
                    this.CustomerRowChanging(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerRowDeleted != null)) {
                    this.CustomerRowDeleted(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerRowDeleting != null)) {
                    this.CustomerRowDeleting(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerRow(CustomerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DepartmentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDepartmentID;
            
            private System.Data.DataColumn columnDepartmentName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentDataTable() {
                this.TableName = "Department";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DepartmentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DepartmentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentIDColumn {
                get {
                    return this.columnDepartmentID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentNameColumn {
                get {
                    return this.columnDepartmentName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow this[int index] {
                get {
                    return ((DepartmentRow)(this.Rows[index]));
                }
            }
            
            public event DepartmentRowChangeEventHandler DepartmentRowChanging;
            
            public event DepartmentRowChangeEventHandler DepartmentRowChanged;
            
            public event DepartmentRowChangeEventHandler DepartmentRowDeleting;
            
            public event DepartmentRowChangeEventHandler DepartmentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDepartmentRow(DepartmentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow AddDepartmentRow(string DepartmentID, string DepartmentName) {
                DepartmentRow rowDepartmentRow = ((DepartmentRow)(this.NewRow()));
                rowDepartmentRow.ItemArray = new object[] {
                        DepartmentID,
                        DepartmentName};
                this.Rows.Add(rowDepartmentRow);
                return rowDepartmentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow FindByDepartmentID(string DepartmentID) {
                return ((DepartmentRow)(this.Rows.Find(new object[] {
                            DepartmentID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DepartmentDataTable cln = ((DepartmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DepartmentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDepartmentID = base.Columns["DepartmentID"];
                this.columnDepartmentName = base.Columns["DepartmentName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDepartmentID = new System.Data.DataColumn("DepartmentID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentID);
                this.columnDepartmentName = new System.Data.DataColumn("DepartmentName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDepartmentID}, true));
                this.columnDepartmentID.AllowDBNull = false;
                this.columnDepartmentID.Unique = true;
                this.columnDepartmentID.MaxLength = 3;
                this.columnDepartmentName.AllowDBNull = false;
                this.columnDepartmentName.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow NewDepartmentRow() {
                return ((DepartmentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DepartmentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DepartmentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DepartmentRowChanged != null)) {
                    this.DepartmentRowChanged(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DepartmentRowChanging != null)) {
                    this.DepartmentRowChanging(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DepartmentRowDeleted != null)) {
                    this.DepartmentRowDeleted(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DepartmentRowDeleting != null)) {
                    this.DepartmentRowDeleting(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDepartmentRow(DepartmentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DepartmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DriverDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDriverID;
            
            private System.Data.DataColumn columnDriverName;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnAge;
            
            private System.Data.DataColumn columnLicenseNumber;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverDataTable() {
                this.TableName = "Driver";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DriverDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DriverDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DriverIDColumn {
                get {
                    return this.columnDriverID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DriverNameColumn {
                get {
                    return this.columnDriverName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AgeColumn {
                get {
                    return this.columnAge;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LicenseNumberColumn {
                get {
                    return this.columnLicenseNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRow this[int index] {
                get {
                    return ((DriverRow)(this.Rows[index]));
                }
            }
            
            public event DriverRowChangeEventHandler DriverRowChanging;
            
            public event DriverRowChangeEventHandler DriverRowChanged;
            
            public event DriverRowChangeEventHandler DriverRowDeleting;
            
            public event DriverRowChangeEventHandler DriverRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDriverRow(DriverRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRow AddDriverRow(string DriverID, string DriverName, string Address, int Age, string LicenseNumber) {
                DriverRow rowDriverRow = ((DriverRow)(this.NewRow()));
                rowDriverRow.ItemArray = new object[] {
                        DriverID,
                        DriverName,
                        Address,
                        Age,
                        LicenseNumber};
                this.Rows.Add(rowDriverRow);
                return rowDriverRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRow FindByDriverID(string DriverID) {
                return ((DriverRow)(this.Rows.Find(new object[] {
                            DriverID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DriverDataTable cln = ((DriverDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DriverDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDriverID = base.Columns["DriverID"];
                this.columnDriverName = base.Columns["DriverName"];
                this.columnAddress = base.Columns["Address"];
                this.columnAge = base.Columns["Age"];
                this.columnLicenseNumber = base.Columns["LicenseNumber"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDriverID = new System.Data.DataColumn("DriverID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriverID);
                this.columnDriverName = new System.Data.DataColumn("DriverName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriverName);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnAge = new System.Data.DataColumn("Age", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAge);
                this.columnLicenseNumber = new System.Data.DataColumn("LicenseNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseNumber);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDriverID}, true));
                this.columnDriverID.AllowDBNull = false;
                this.columnDriverID.Unique = true;
                this.columnDriverID.MaxLength = 3;
                this.columnDriverName.AllowDBNull = false;
                this.columnDriverName.MaxLength = 100;
                this.columnAddress.AllowDBNull = false;
                this.columnAddress.MaxLength = 100;
                this.columnAge.AllowDBNull = false;
                this.columnLicenseNumber.AllowDBNull = false;
                this.columnLicenseNumber.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRow NewDriverRow() {
                return ((DriverRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DriverRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DriverRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DriverRowChanged != null)) {
                    this.DriverRowChanged(this, new DriverRowChangeEvent(((DriverRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DriverRowChanging != null)) {
                    this.DriverRowChanging(this, new DriverRowChangeEvent(((DriverRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DriverRowDeleted != null)) {
                    this.DriverRowDeleted(this, new DriverRowChangeEvent(((DriverRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DriverRowDeleting != null)) {
                    this.DriverRowDeleting(this, new DriverRowChangeEvent(((DriverRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDriverRow(DriverRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DriverDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEmployeeID;
            
            private System.Data.DataColumn columnEmployeeName;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnDateOfBirth;
            
            private System.Data.DataColumn columnDateOfJoininng;
            
            private System.Data.DataColumn columnDesignation;
            
            private System.Data.DataColumn columnDepartmentID;
            
            private System.Data.DataColumn columnPassword;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDataTable() {
                this.TableName = "Employee";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfBirthColumn {
                get {
                    return this.columnDateOfBirth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfJoininngColumn {
                get {
                    return this.columnDateOfJoininng;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentIDColumn {
                get {
                    return this.columnDepartmentID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow this[int index] {
                get {
                    return ((EmployeeRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeRowChangeEventHandler EmployeeRowChanging;
            
            public event EmployeeRowChangeEventHandler EmployeeRowChanged;
            
            public event EmployeeRowChangeEventHandler EmployeeRowDeleting;
            
            public event EmployeeRowChangeEventHandler EmployeeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeRow(EmployeeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow AddEmployeeRow(string EmployeeID, string EmployeeName, string Address, System.DateTime DateOfBirth, System.DateTime DateOfJoininng, string Designation, DepartmentRow parentDepartmentRowByFK__Employee__Depart__7B905C75, string Password) {
                EmployeeRow rowEmployeeRow = ((EmployeeRow)(this.NewRow()));
                rowEmployeeRow.ItemArray = new object[] {
                        EmployeeID,
                        EmployeeName,
                        Address,
                        DateOfBirth,
                        DateOfJoininng,
                        Designation,
                        parentDepartmentRowByFK__Employee__Depart__7B905C75[0],
                        Password};
                this.Rows.Add(rowEmployeeRow);
                return rowEmployeeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow FindByEmployeeID(string EmployeeID) {
                return ((EmployeeRow)(this.Rows.Find(new object[] {
                            EmployeeID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EmployeeDataTable cln = ((EmployeeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EmployeeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnAddress = base.Columns["Address"];
                this.columnDateOfBirth = base.Columns["DateOfBirth"];
                this.columnDateOfJoininng = base.Columns["DateOfJoininng"];
                this.columnDesignation = base.Columns["Designation"];
                this.columnDepartmentID = base.Columns["DepartmentID"];
                this.columnPassword = base.Columns["Password"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new System.Data.DataColumn("EmployeeID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnEmployeeName = new System.Data.DataColumn("EmployeeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnDateOfBirth = new System.Data.DataColumn("DateOfBirth", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfBirth);
                this.columnDateOfJoininng = new System.Data.DataColumn("DateOfJoininng", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfJoininng);
                this.columnDesignation = new System.Data.DataColumn("Designation", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
                this.columnDepartmentID = new System.Data.DataColumn("DepartmentID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentID);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEmployeeID}, true));
                this.columnEmployeeID.AllowDBNull = false;
                this.columnEmployeeID.Unique = true;
                this.columnEmployeeID.MaxLength = 4;
                this.columnEmployeeName.AllowDBNull = false;
                this.columnEmployeeName.MaxLength = 100;
                this.columnAddress.AllowDBNull = false;
                this.columnAddress.MaxLength = 100;
                this.columnDateOfBirth.AllowDBNull = false;
                this.columnDateOfJoininng.AllowDBNull = false;
                this.columnDesignation.AllowDBNull = false;
                this.columnDesignation.MaxLength = 50;
                this.columnDepartmentID.AllowDBNull = false;
                this.columnDepartmentID.MaxLength = 3;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow NewEmployeeRow() {
                return ((EmployeeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EmployeeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EmployeeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeRowChanged != null)) {
                    this.EmployeeRowChanged(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeRowChanging != null)) {
                    this.EmployeeRowChanging(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeRowDeleted != null)) {
                    this.EmployeeRowDeleted(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeRowDeleting != null)) {
                    this.EmployeeRowDeleting(this, new EmployeeRowChangeEvent(((EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeRow(EmployeeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FeedBackDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeedBackID;
            
            private System.Data.DataColumn columnCustomerID;
            
            private System.Data.DataColumn columnRepresentativeID;
            
            private System.Data.DataColumn columnDateOfFeedBack;
            
            private System.Data.DataColumn columnFeedBackSource;
            
            private System.Data.DataColumn columnFeedBackType;
            
            private System.Data.DataColumn columnFeedBackCategory;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnDepartmentID;
            
            private System.Data.DataColumn columnIncidentDate;
            
            private System.Data.DataColumn columnIncidentPlace;
            
            private System.Data.DataColumn columnBusStop;
            
            private System.Data.DataColumn columnVehicleNumber;
            
            private System.Data.DataColumn columnAssignerID;
            
            private System.Data.DataColumn columnAssigneeID;
            
            private System.Data.DataColumn columnDateOfCompletion;
            
            private System.Data.DataColumn columnDateOfClosure;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnDateOfAssignment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackDataTable() {
                this.TableName = "FeedBack";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FeedBackDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FeedBackDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackIDColumn {
                get {
                    return this.columnFeedBackID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepresentativeIDColumn {
                get {
                    return this.columnRepresentativeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfFeedBackColumn {
                get {
                    return this.columnDateOfFeedBack;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackSourceColumn {
                get {
                    return this.columnFeedBackSource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackTypeColumn {
                get {
                    return this.columnFeedBackType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackCategoryColumn {
                get {
                    return this.columnFeedBackCategory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentIDColumn {
                get {
                    return this.columnDepartmentID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncidentDateColumn {
                get {
                    return this.columnIncidentDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncidentPlaceColumn {
                get {
                    return this.columnIncidentPlace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BusStopColumn {
                get {
                    return this.columnBusStop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VehicleNumberColumn {
                get {
                    return this.columnVehicleNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssignerIDColumn {
                get {
                    return this.columnAssignerID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssigneeIDColumn {
                get {
                    return this.columnAssigneeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfCompletionColumn {
                get {
                    return this.columnDateOfCompletion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfClosureColumn {
                get {
                    return this.columnDateOfClosure;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfAssignmentColumn {
                get {
                    return this.columnDateOfAssignment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow this[int index] {
                get {
                    return ((FeedBackRow)(this.Rows[index]));
                }
            }
            
            public event FeedBackRowChangeEventHandler FeedBackRowChanging;
            
            public event FeedBackRowChangeEventHandler FeedBackRowChanged;
            
            public event FeedBackRowChangeEventHandler FeedBackRowDeleting;
            
            public event FeedBackRowChangeEventHandler FeedBackRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFeedBackRow(FeedBackRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow AddFeedBackRow(
                        string FeedBackID, 
                        CustomerRow parentCustomerRowByFK__FeedBack__Custom__00551192, 
                        EmployeeRow parentEmployeeRowByFK__FeedBack__Repres__014935CB, 
                        System.DateTime DateOfFeedBack, 
                        string FeedBackSource, 
                        string FeedBackType, 
                        string FeedBackCategory, 
                        string Description, 
                        DepartmentRow parentDepartmentRowByFK__FeedBack__Depart__023D5A04, 
                        System.DateTime IncidentDate, 
                        string IncidentPlace, 
                        string BusStop, 
                        string VehicleNumber, 
                        EmployeeRow parentEmployeeRowByFK__FeedBack__Assign__03317E3D, 
                        EmployeeRow parentEmployeeRowByFK__FeedBack__Assign__0425A276, 
                        System.DateTime DateOfCompletion, 
                        System.DateTime DateOfClosure, 
                        string Status, 
                        System.DateTime DateOfAssignment) {
                FeedBackRow rowFeedBackRow = ((FeedBackRow)(this.NewRow()));
                rowFeedBackRow.ItemArray = new object[] {
                        FeedBackID,
                        parentCustomerRowByFK__FeedBack__Custom__00551192[0],
                        parentEmployeeRowByFK__FeedBack__Repres__014935CB[0],
                        DateOfFeedBack,
                        FeedBackSource,
                        FeedBackType,
                        FeedBackCategory,
                        Description,
                        parentDepartmentRowByFK__FeedBack__Depart__023D5A04[0],
                        IncidentDate,
                        IncidentPlace,
                        BusStop,
                        VehicleNumber,
                        parentEmployeeRowByFK__FeedBack__Assign__03317E3D[0],
                        parentEmployeeRowByFK__FeedBack__Assign__0425A276[0],
                        DateOfCompletion,
                        DateOfClosure,
                        Status,
                        DateOfAssignment};
                this.Rows.Add(rowFeedBackRow);
                return rowFeedBackRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow FindByFeedBackID(string FeedBackID) {
                return ((FeedBackRow)(this.Rows.Find(new object[] {
                            FeedBackID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FeedBackDataTable cln = ((FeedBackDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FeedBackDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeedBackID = base.Columns["FeedBackID"];
                this.columnCustomerID = base.Columns["CustomerID"];
                this.columnRepresentativeID = base.Columns["RepresentativeID"];
                this.columnDateOfFeedBack = base.Columns["DateOfFeedBack"];
                this.columnFeedBackSource = base.Columns["FeedBackSource"];
                this.columnFeedBackType = base.Columns["FeedBackType"];
                this.columnFeedBackCategory = base.Columns["FeedBackCategory"];
                this.columnDescription = base.Columns["Description"];
                this.columnDepartmentID = base.Columns["DepartmentID"];
                this.columnIncidentDate = base.Columns["IncidentDate"];
                this.columnIncidentPlace = base.Columns["IncidentPlace"];
                this.columnBusStop = base.Columns["BusStop"];
                this.columnVehicleNumber = base.Columns["VehicleNumber"];
                this.columnAssignerID = base.Columns["AssignerID"];
                this.columnAssigneeID = base.Columns["AssigneeID"];
                this.columnDateOfCompletion = base.Columns["DateOfCompletion"];
                this.columnDateOfClosure = base.Columns["DateOfClosure"];
                this.columnStatus = base.Columns["Status"];
                this.columnDateOfAssignment = base.Columns["DateOfAssignment"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeedBackID = new System.Data.DataColumn("FeedBackID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackID);
                this.columnCustomerID = new System.Data.DataColumn("CustomerID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerID);
                this.columnRepresentativeID = new System.Data.DataColumn("RepresentativeID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepresentativeID);
                this.columnDateOfFeedBack = new System.Data.DataColumn("DateOfFeedBack", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfFeedBack);
                this.columnFeedBackSource = new System.Data.DataColumn("FeedBackSource", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackSource);
                this.columnFeedBackType = new System.Data.DataColumn("FeedBackType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackType);
                this.columnFeedBackCategory = new System.Data.DataColumn("FeedBackCategory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackCategory);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDepartmentID = new System.Data.DataColumn("DepartmentID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentID);
                this.columnIncidentDate = new System.Data.DataColumn("IncidentDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncidentDate);
                this.columnIncidentPlace = new System.Data.DataColumn("IncidentPlace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncidentPlace);
                this.columnBusStop = new System.Data.DataColumn("BusStop", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusStop);
                this.columnVehicleNumber = new System.Data.DataColumn("VehicleNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVehicleNumber);
                this.columnAssignerID = new System.Data.DataColumn("AssignerID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignerID);
                this.columnAssigneeID = new System.Data.DataColumn("AssigneeID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssigneeID);
                this.columnDateOfCompletion = new System.Data.DataColumn("DateOfCompletion", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfCompletion);
                this.columnDateOfClosure = new System.Data.DataColumn("DateOfClosure", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfClosure);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnDateOfAssignment = new System.Data.DataColumn("DateOfAssignment", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfAssignment);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFeedBackID}, true));
                this.columnFeedBackID.AllowDBNull = false;
                this.columnFeedBackID.Unique = true;
                this.columnFeedBackID.MaxLength = 5;
                this.columnCustomerID.AllowDBNull = false;
                this.columnCustomerID.MaxLength = 4;
                this.columnRepresentativeID.AllowDBNull = false;
                this.columnRepresentativeID.MaxLength = 4;
                this.columnDateOfFeedBack.AllowDBNull = false;
                this.columnFeedBackSource.AllowDBNull = false;
                this.columnFeedBackSource.MaxLength = 50;
                this.columnFeedBackType.AllowDBNull = false;
                this.columnFeedBackType.MaxLength = 50;
                this.columnFeedBackCategory.AllowDBNull = false;
                this.columnFeedBackCategory.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 1073741823;
                this.columnDepartmentID.AllowDBNull = false;
                this.columnDepartmentID.MaxLength = 3;
                this.columnIncidentDate.AllowDBNull = false;
                this.columnIncidentPlace.AllowDBNull = false;
                this.columnIncidentPlace.MaxLength = 50;
                this.columnBusStop.AllowDBNull = false;
                this.columnBusStop.MaxLength = 50;
                this.columnVehicleNumber.AllowDBNull = false;
                this.columnVehicleNumber.MaxLength = 50;
                this.columnAssignerID.AllowDBNull = false;
                this.columnAssignerID.MaxLength = 4;
                this.columnAssigneeID.AllowDBNull = false;
                this.columnAssigneeID.MaxLength = 4;
                this.columnDateOfCompletion.AllowDBNull = false;
                this.columnDateOfClosure.AllowDBNull = false;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
                this.columnDateOfAssignment.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow NewFeedBackRow() {
                return ((FeedBackRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FeedBackRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FeedBackRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FeedBackRowChanged != null)) {
                    this.FeedBackRowChanged(this, new FeedBackRowChangeEvent(((FeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FeedBackRowChanging != null)) {
                    this.FeedBackRowChanging(this, new FeedBackRowChangeEvent(((FeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FeedBackRowDeleted != null)) {
                    this.FeedBackRowDeleted(this, new FeedBackRowChangeEvent(((FeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FeedBackRowDeleting != null)) {
                    this.FeedBackRowDeleting(this, new FeedBackRowChangeEvent(((FeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFeedBackRow(FeedBackRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FeedBackDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvestigationDetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeedBackID;
            
            private System.Data.DataColumn columnValidity;
            
            private System.Data.DataColumn columnReason;
            
            private System.Data.DataColumn columnDriverID;
            
            private System.Data.DataColumn columnDetails;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsDataTable() {
                this.TableName = "InvestigationDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvestigationDetailsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvestigationDetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackIDColumn {
                get {
                    return this.columnFeedBackID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValidityColumn {
                get {
                    return this.columnValidity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReasonColumn {
                get {
                    return this.columnReason;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DriverIDColumn {
                get {
                    return this.columnDriverID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DetailsColumn {
                get {
                    return this.columnDetails;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsRow this[int index] {
                get {
                    return ((InvestigationDetailsRow)(this.Rows[index]));
                }
            }
            
            public event InvestigationDetailsRowChangeEventHandler InvestigationDetailsRowChanging;
            
            public event InvestigationDetailsRowChangeEventHandler InvestigationDetailsRowChanged;
            
            public event InvestigationDetailsRowChangeEventHandler InvestigationDetailsRowDeleting;
            
            public event InvestigationDetailsRowChangeEventHandler InvestigationDetailsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvestigationDetailsRow(InvestigationDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsRow AddInvestigationDetailsRow(FeedBackRow parentFeedBackRowByFK__Investiga__FeedB__060DEAE8, string Validity, string Reason, DriverRow parentDriverRowByFK__Investiga__Drive__07020F21, string Details) {
                InvestigationDetailsRow rowInvestigationDetailsRow = ((InvestigationDetailsRow)(this.NewRow()));
                rowInvestigationDetailsRow.ItemArray = new object[] {
                        parentFeedBackRowByFK__Investiga__FeedB__060DEAE8[0],
                        Validity,
                        Reason,
                        parentDriverRowByFK__Investiga__Drive__07020F21[0],
                        Details};
                this.Rows.Add(rowInvestigationDetailsRow);
                return rowInvestigationDetailsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InvestigationDetailsDataTable cln = ((InvestigationDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InvestigationDetailsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeedBackID = base.Columns["FeedBackID"];
                this.columnValidity = base.Columns["Validity"];
                this.columnReason = base.Columns["Reason"];
                this.columnDriverID = base.Columns["DriverID"];
                this.columnDetails = base.Columns["Details"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeedBackID = new System.Data.DataColumn("FeedBackID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackID);
                this.columnValidity = new System.Data.DataColumn("Validity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidity);
                this.columnReason = new System.Data.DataColumn("Reason", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReason);
                this.columnDriverID = new System.Data.DataColumn("DriverID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriverID);
                this.columnDetails = new System.Data.DataColumn("Details", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetails);
                this.columnFeedBackID.AllowDBNull = false;
                this.columnFeedBackID.MaxLength = 5;
                this.columnValidity.AllowDBNull = false;
                this.columnValidity.MaxLength = 10;
                this.columnReason.AllowDBNull = false;
                this.columnReason.MaxLength = 1073741823;
                this.columnDriverID.AllowDBNull = false;
                this.columnDriverID.MaxLength = 3;
                this.columnDetails.AllowDBNull = false;
                this.columnDetails.MaxLength = 1073741823;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsRow NewInvestigationDetailsRow() {
                return ((InvestigationDetailsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InvestigationDetailsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InvestigationDetailsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvestigationDetailsRowChanged != null)) {
                    this.InvestigationDetailsRowChanged(this, new InvestigationDetailsRowChangeEvent(((InvestigationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvestigationDetailsRowChanging != null)) {
                    this.InvestigationDetailsRowChanging(this, new InvestigationDetailsRowChangeEvent(((InvestigationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvestigationDetailsRowDeleted != null)) {
                    this.InvestigationDetailsRowDeleted(this, new InvestigationDetailsRowChangeEvent(((InvestigationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvestigationDetailsRowDeleting != null)) {
                    this.InvestigationDetailsRowDeleting(this, new InvestigationDetailsRowChangeEvent(((InvestigationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvestigationDetailsRow(InvestigationDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvestigationDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CurrentEmployeeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEmployeeID;
            
            private System.Data.DataColumn columnEmployeeName;
            
            private System.Data.DataColumn columnDesignation;
            
            private System.Data.DataColumn columnDepartmentID;
            
            private System.Data.DataColumn columnDepartmentName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrentEmployeeDataTable() {
                this.TableName = "CurrentEmployee";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CurrentEmployeeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CurrentEmployeeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentIDColumn {
                get {
                    return this.columnDepartmentID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentNameColumn {
                get {
                    return this.columnDepartmentName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrentEmployeeRow this[int index] {
                get {
                    return ((CurrentEmployeeRow)(this.Rows[index]));
                }
            }
            
            public event CurrentEmployeeRowChangeEventHandler CurrentEmployeeRowChanging;
            
            public event CurrentEmployeeRowChangeEventHandler CurrentEmployeeRowChanged;
            
            public event CurrentEmployeeRowChangeEventHandler CurrentEmployeeRowDeleting;
            
            public event CurrentEmployeeRowChangeEventHandler CurrentEmployeeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCurrentEmployeeRow(CurrentEmployeeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrentEmployeeRow AddCurrentEmployeeRow(string EmployeeID, string EmployeeName, string Designation, string DepartmentID, string DepartmentName) {
                CurrentEmployeeRow rowCurrentEmployeeRow = ((CurrentEmployeeRow)(this.NewRow()));
                rowCurrentEmployeeRow.ItemArray = new object[] {
                        EmployeeID,
                        EmployeeName,
                        Designation,
                        DepartmentID,
                        DepartmentName};
                this.Rows.Add(rowCurrentEmployeeRow);
                return rowCurrentEmployeeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrentEmployeeRow FindByEmployeeID(string EmployeeID) {
                return ((CurrentEmployeeRow)(this.Rows.Find(new object[] {
                            EmployeeID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CurrentEmployeeDataTable cln = ((CurrentEmployeeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CurrentEmployeeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnDesignation = base.Columns["Designation"];
                this.columnDepartmentID = base.Columns["DepartmentID"];
                this.columnDepartmentName = base.Columns["DepartmentName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new System.Data.DataColumn("EmployeeID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnEmployeeName = new System.Data.DataColumn("EmployeeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnDesignation = new System.Data.DataColumn("Designation", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
                this.columnDepartmentID = new System.Data.DataColumn("DepartmentID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentID);
                this.columnDepartmentName = new System.Data.DataColumn("DepartmentName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEmployeeID}, true));
                this.columnEmployeeID.AllowDBNull = false;
                this.columnEmployeeID.Unique = true;
                this.columnEmployeeID.MaxLength = 4;
                this.columnEmployeeName.AllowDBNull = false;
                this.columnEmployeeName.MaxLength = 100;
                this.columnDesignation.AllowDBNull = false;
                this.columnDesignation.MaxLength = 50;
                this.columnDepartmentID.AllowDBNull = false;
                this.columnDepartmentID.MaxLength = 3;
                this.columnDepartmentName.AllowDBNull = false;
                this.columnDepartmentName.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrentEmployeeRow NewCurrentEmployeeRow() {
                return ((CurrentEmployeeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CurrentEmployeeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CurrentEmployeeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CurrentEmployeeRowChanged != null)) {
                    this.CurrentEmployeeRowChanged(this, new CurrentEmployeeRowChangeEvent(((CurrentEmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CurrentEmployeeRowChanging != null)) {
                    this.CurrentEmployeeRowChanging(this, new CurrentEmployeeRowChangeEvent(((CurrentEmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CurrentEmployeeRowDeleted != null)) {
                    this.CurrentEmployeeRowDeleted(this, new CurrentEmployeeRowChangeEvent(((CurrentEmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CurrentEmployeeRowDeleting != null)) {
                    this.CurrentEmployeeRowDeleting(this, new CurrentEmployeeRowChangeEvent(((CurrentEmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCurrentEmployeeRow(CurrentEmployeeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CurrentEmployeeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FeedBackDataDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeedBackID;
            
            private System.Data.DataColumn columnCustomerName;
            
            private System.Data.DataColumn columnRepresentativeName;
            
            private System.Data.DataColumn columnDateOfFeedBack;
            
            private System.Data.DataColumn columnFeedBackSource;
            
            private System.Data.DataColumn columnFeedBackType;
            
            private System.Data.DataColumn columnFeedBackCategory;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnDepartmentName;
            
            private System.Data.DataColumn columnIncidentDate;
            
            private System.Data.DataColumn columnIncidentPlace;
            
            private System.Data.DataColumn columnBusStop;
            
            private System.Data.DataColumn columnVehicleNumber;
            
            private System.Data.DataColumn columnAssignerName;
            
            private System.Data.DataColumn columnAssigneeName;
            
            private System.Data.DataColumn columnStatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackDataDataTable() {
                this.TableName = "FeedBackData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FeedBackDataDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FeedBackDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackIDColumn {
                get {
                    return this.columnFeedBackID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepresentativeNameColumn {
                get {
                    return this.columnRepresentativeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfFeedBackColumn {
                get {
                    return this.columnDateOfFeedBack;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackSourceColumn {
                get {
                    return this.columnFeedBackSource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackTypeColumn {
                get {
                    return this.columnFeedBackType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackCategoryColumn {
                get {
                    return this.columnFeedBackCategory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentNameColumn {
                get {
                    return this.columnDepartmentName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncidentDateColumn {
                get {
                    return this.columnIncidentDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncidentPlaceColumn {
                get {
                    return this.columnIncidentPlace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BusStopColumn {
                get {
                    return this.columnBusStop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VehicleNumberColumn {
                get {
                    return this.columnVehicleNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssignerNameColumn {
                get {
                    return this.columnAssignerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssigneeNameColumn {
                get {
                    return this.columnAssigneeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackDataRow this[int index] {
                get {
                    return ((FeedBackDataRow)(this.Rows[index]));
                }
            }
            
            public event FeedBackDataRowChangeEventHandler FeedBackDataRowChanging;
            
            public event FeedBackDataRowChangeEventHandler FeedBackDataRowChanged;
            
            public event FeedBackDataRowChangeEventHandler FeedBackDataRowDeleting;
            
            public event FeedBackDataRowChangeEventHandler FeedBackDataRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFeedBackDataRow(FeedBackDataRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackDataRow AddFeedBackDataRow(
                        string FeedBackID, 
                        string CustomerName, 
                        string RepresentativeName, 
                        System.DateTime DateOfFeedBack, 
                        string FeedBackSource, 
                        string FeedBackType, 
                        string FeedBackCategory, 
                        string Description, 
                        string DepartmentName, 
                        System.DateTime IncidentDate, 
                        string IncidentPlace, 
                        string BusStop, 
                        string VehicleNumber, 
                        string AssignerName, 
                        string AssigneeName, 
                        string Status) {
                FeedBackDataRow rowFeedBackDataRow = ((FeedBackDataRow)(this.NewRow()));
                rowFeedBackDataRow.ItemArray = new object[] {
                        FeedBackID,
                        CustomerName,
                        RepresentativeName,
                        DateOfFeedBack,
                        FeedBackSource,
                        FeedBackType,
                        FeedBackCategory,
                        Description,
                        DepartmentName,
                        IncidentDate,
                        IncidentPlace,
                        BusStop,
                        VehicleNumber,
                        AssignerName,
                        AssigneeName,
                        Status};
                this.Rows.Add(rowFeedBackDataRow);
                return rowFeedBackDataRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackDataRow FindByFeedBackID(string FeedBackID) {
                return ((FeedBackDataRow)(this.Rows.Find(new object[] {
                            FeedBackID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FeedBackDataDataTable cln = ((FeedBackDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FeedBackDataDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeedBackID = base.Columns["FeedBackID"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnRepresentativeName = base.Columns["RepresentativeName"];
                this.columnDateOfFeedBack = base.Columns["DateOfFeedBack"];
                this.columnFeedBackSource = base.Columns["FeedBackSource"];
                this.columnFeedBackType = base.Columns["FeedBackType"];
                this.columnFeedBackCategory = base.Columns["FeedBackCategory"];
                this.columnDescription = base.Columns["Description"];
                this.columnDepartmentName = base.Columns["DepartmentName"];
                this.columnIncidentDate = base.Columns["IncidentDate"];
                this.columnIncidentPlace = base.Columns["IncidentPlace"];
                this.columnBusStop = base.Columns["BusStop"];
                this.columnVehicleNumber = base.Columns["VehicleNumber"];
                this.columnAssignerName = base.Columns["AssignerName"];
                this.columnAssigneeName = base.Columns["AssigneeName"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeedBackID = new System.Data.DataColumn("FeedBackID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackID);
                this.columnCustomerName = new System.Data.DataColumn("CustomerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnRepresentativeName = new System.Data.DataColumn("RepresentativeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepresentativeName);
                this.columnDateOfFeedBack = new System.Data.DataColumn("DateOfFeedBack", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfFeedBack);
                this.columnFeedBackSource = new System.Data.DataColumn("FeedBackSource", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackSource);
                this.columnFeedBackType = new System.Data.DataColumn("FeedBackType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackType);
                this.columnFeedBackCategory = new System.Data.DataColumn("FeedBackCategory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackCategory);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDepartmentName = new System.Data.DataColumn("DepartmentName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentName);
                this.columnIncidentDate = new System.Data.DataColumn("IncidentDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncidentDate);
                this.columnIncidentPlace = new System.Data.DataColumn("IncidentPlace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncidentPlace);
                this.columnBusStop = new System.Data.DataColumn("BusStop", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusStop);
                this.columnVehicleNumber = new System.Data.DataColumn("VehicleNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVehicleNumber);
                this.columnAssignerName = new System.Data.DataColumn("AssignerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignerName);
                this.columnAssigneeName = new System.Data.DataColumn("AssigneeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssigneeName);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFeedBackID}, true));
                this.columnFeedBackID.AllowDBNull = false;
                this.columnFeedBackID.Unique = true;
                this.columnFeedBackID.MaxLength = 5;
                this.columnCustomerName.AllowDBNull = false;
                this.columnCustomerName.MaxLength = 100;
                this.columnRepresentativeName.AllowDBNull = false;
                this.columnRepresentativeName.MaxLength = 100;
                this.columnDateOfFeedBack.AllowDBNull = false;
                this.columnFeedBackSource.AllowDBNull = false;
                this.columnFeedBackSource.MaxLength = 50;
                this.columnFeedBackType.AllowDBNull = false;
                this.columnFeedBackType.MaxLength = 50;
                this.columnFeedBackCategory.AllowDBNull = false;
                this.columnFeedBackCategory.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 1073741823;
                this.columnDepartmentName.AllowDBNull = false;
                this.columnDepartmentName.MaxLength = 100;
                this.columnIncidentDate.AllowDBNull = false;
                this.columnIncidentPlace.AllowDBNull = false;
                this.columnIncidentPlace.MaxLength = 50;
                this.columnBusStop.AllowDBNull = false;
                this.columnBusStop.MaxLength = 50;
                this.columnVehicleNumber.AllowDBNull = false;
                this.columnVehicleNumber.MaxLength = 50;
                this.columnAssignerName.AllowDBNull = false;
                this.columnAssignerName.MaxLength = 100;
                this.columnAssigneeName.AllowDBNull = false;
                this.columnAssigneeName.MaxLength = 100;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackDataRow NewFeedBackDataRow() {
                return ((FeedBackDataRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FeedBackDataRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FeedBackDataRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FeedBackDataRowChanged != null)) {
                    this.FeedBackDataRowChanged(this, new FeedBackDataRowChangeEvent(((FeedBackDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FeedBackDataRowChanging != null)) {
                    this.FeedBackDataRowChanging(this, new FeedBackDataRowChangeEvent(((FeedBackDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FeedBackDataRowDeleted != null)) {
                    this.FeedBackDataRowDeleted(this, new FeedBackDataRowChangeEvent(((FeedBackDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FeedBackDataRowDeleting != null)) {
                    this.FeedBackDataRowDeleting(this, new FeedBackDataRowChangeEvent(((FeedBackDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFeedBackDataRow(FeedBackDataRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FeedBackDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ComplaintDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeedBackID;
            
            private System.Data.DataColumn columnCustomerName;
            
            private System.Data.DataColumn columnRepresentativeName;
            
            private System.Data.DataColumn columnDateOfFeedBack;
            
            private System.Data.DataColumn columnFeedBackSource;
            
            private System.Data.DataColumn columnFeedBackType;
            
            private System.Data.DataColumn columnFeedBackCategory;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnDepartmentName;
            
            private System.Data.DataColumn columnIncidentDate;
            
            private System.Data.DataColumn columnIncidentPlace;
            
            private System.Data.DataColumn columnBusStop;
            
            private System.Data.DataColumn columnVehicleNumber;
            
            private System.Data.DataColumn columnAssignerName;
            
            private System.Data.DataColumn columnAssigneeName;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnAssigneeID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplaintDataTable() {
                this.TableName = "Complaint";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComplaintDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ComplaintDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackIDColumn {
                get {
                    return this.columnFeedBackID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepresentativeNameColumn {
                get {
                    return this.columnRepresentativeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfFeedBackColumn {
                get {
                    return this.columnDateOfFeedBack;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackSourceColumn {
                get {
                    return this.columnFeedBackSource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackTypeColumn {
                get {
                    return this.columnFeedBackType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackCategoryColumn {
                get {
                    return this.columnFeedBackCategory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentNameColumn {
                get {
                    return this.columnDepartmentName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncidentDateColumn {
                get {
                    return this.columnIncidentDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncidentPlaceColumn {
                get {
                    return this.columnIncidentPlace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BusStopColumn {
                get {
                    return this.columnBusStop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VehicleNumberColumn {
                get {
                    return this.columnVehicleNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssignerNameColumn {
                get {
                    return this.columnAssignerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssigneeNameColumn {
                get {
                    return this.columnAssigneeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssigneeIDColumn {
                get {
                    return this.columnAssigneeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplaintRow this[int index] {
                get {
                    return ((ComplaintRow)(this.Rows[index]));
                }
            }
            
            public event ComplaintRowChangeEventHandler ComplaintRowChanging;
            
            public event ComplaintRowChangeEventHandler ComplaintRowChanged;
            
            public event ComplaintRowChangeEventHandler ComplaintRowDeleting;
            
            public event ComplaintRowChangeEventHandler ComplaintRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddComplaintRow(ComplaintRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplaintRow AddComplaintRow(
                        string FeedBackID, 
                        string CustomerName, 
                        string RepresentativeName, 
                        System.DateTime DateOfFeedBack, 
                        string FeedBackSource, 
                        string FeedBackType, 
                        string FeedBackCategory, 
                        string Description, 
                        string DepartmentName, 
                        System.DateTime IncidentDate, 
                        string IncidentPlace, 
                        string BusStop, 
                        string VehicleNumber, 
                        string AssignerName, 
                        string AssigneeName, 
                        string Status, 
                        string AssigneeID) {
                ComplaintRow rowComplaintRow = ((ComplaintRow)(this.NewRow()));
                rowComplaintRow.ItemArray = new object[] {
                        FeedBackID,
                        CustomerName,
                        RepresentativeName,
                        DateOfFeedBack,
                        FeedBackSource,
                        FeedBackType,
                        FeedBackCategory,
                        Description,
                        DepartmentName,
                        IncidentDate,
                        IncidentPlace,
                        BusStop,
                        VehicleNumber,
                        AssignerName,
                        AssigneeName,
                        Status,
                        AssigneeID};
                this.Rows.Add(rowComplaintRow);
                return rowComplaintRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplaintRow FindByFeedBackID(string FeedBackID) {
                return ((ComplaintRow)(this.Rows.Find(new object[] {
                            FeedBackID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ComplaintDataTable cln = ((ComplaintDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ComplaintDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeedBackID = base.Columns["FeedBackID"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnRepresentativeName = base.Columns["RepresentativeName"];
                this.columnDateOfFeedBack = base.Columns["DateOfFeedBack"];
                this.columnFeedBackSource = base.Columns["FeedBackSource"];
                this.columnFeedBackType = base.Columns["FeedBackType"];
                this.columnFeedBackCategory = base.Columns["FeedBackCategory"];
                this.columnDescription = base.Columns["Description"];
                this.columnDepartmentName = base.Columns["DepartmentName"];
                this.columnIncidentDate = base.Columns["IncidentDate"];
                this.columnIncidentPlace = base.Columns["IncidentPlace"];
                this.columnBusStop = base.Columns["BusStop"];
                this.columnVehicleNumber = base.Columns["VehicleNumber"];
                this.columnAssignerName = base.Columns["AssignerName"];
                this.columnAssigneeName = base.Columns["AssigneeName"];
                this.columnStatus = base.Columns["Status"];
                this.columnAssigneeID = base.Columns["AssigneeID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeedBackID = new System.Data.DataColumn("FeedBackID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackID);
                this.columnCustomerName = new System.Data.DataColumn("CustomerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnRepresentativeName = new System.Data.DataColumn("RepresentativeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepresentativeName);
                this.columnDateOfFeedBack = new System.Data.DataColumn("DateOfFeedBack", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfFeedBack);
                this.columnFeedBackSource = new System.Data.DataColumn("FeedBackSource", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackSource);
                this.columnFeedBackType = new System.Data.DataColumn("FeedBackType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackType);
                this.columnFeedBackCategory = new System.Data.DataColumn("FeedBackCategory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackCategory);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDepartmentName = new System.Data.DataColumn("DepartmentName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentName);
                this.columnIncidentDate = new System.Data.DataColumn("IncidentDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncidentDate);
                this.columnIncidentPlace = new System.Data.DataColumn("IncidentPlace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncidentPlace);
                this.columnBusStop = new System.Data.DataColumn("BusStop", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusStop);
                this.columnVehicleNumber = new System.Data.DataColumn("VehicleNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVehicleNumber);
                this.columnAssignerName = new System.Data.DataColumn("AssignerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignerName);
                this.columnAssigneeName = new System.Data.DataColumn("AssigneeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssigneeName);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnAssigneeID = new System.Data.DataColumn("AssigneeID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssigneeID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFeedBackID}, true));
                this.columnFeedBackID.AllowDBNull = false;
                this.columnFeedBackID.Unique = true;
                this.columnFeedBackID.MaxLength = 5;
                this.columnCustomerName.AllowDBNull = false;
                this.columnCustomerName.MaxLength = 100;
                this.columnRepresentativeName.AllowDBNull = false;
                this.columnRepresentativeName.MaxLength = 100;
                this.columnDateOfFeedBack.AllowDBNull = false;
                this.columnFeedBackSource.AllowDBNull = false;
                this.columnFeedBackSource.MaxLength = 50;
                this.columnFeedBackType.AllowDBNull = false;
                this.columnFeedBackType.MaxLength = 50;
                this.columnFeedBackCategory.AllowDBNull = false;
                this.columnFeedBackCategory.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 1073741823;
                this.columnDepartmentName.AllowDBNull = false;
                this.columnDepartmentName.MaxLength = 100;
                this.columnIncidentDate.AllowDBNull = false;
                this.columnIncidentPlace.AllowDBNull = false;
                this.columnIncidentPlace.MaxLength = 50;
                this.columnBusStop.AllowDBNull = false;
                this.columnBusStop.MaxLength = 50;
                this.columnVehicleNumber.AllowDBNull = false;
                this.columnVehicleNumber.MaxLength = 50;
                this.columnAssignerName.AllowDBNull = false;
                this.columnAssignerName.MaxLength = 100;
                this.columnAssigneeName.AllowDBNull = false;
                this.columnAssigneeName.MaxLength = 100;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
                this.columnAssigneeID.AllowDBNull = false;
                this.columnAssigneeID.MaxLength = 4;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplaintRow NewComplaintRow() {
                return ((ComplaintRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ComplaintRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ComplaintRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ComplaintRowChanged != null)) {
                    this.ComplaintRowChanged(this, new ComplaintRowChangeEvent(((ComplaintRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ComplaintRowChanging != null)) {
                    this.ComplaintRowChanging(this, new ComplaintRowChangeEvent(((ComplaintRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ComplaintRowDeleted != null)) {
                    this.ComplaintRowDeleted(this, new ComplaintRowChangeEvent(((ComplaintRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ComplaintRowDeleting != null)) {
                    this.ComplaintRowDeleting(this, new ComplaintRowChangeEvent(((ComplaintRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveComplaintRow(ComplaintRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ComplaintDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvestigationDetailsDataDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeedBackID;
            
            private System.Data.DataColumn columnValidity;
            
            private System.Data.DataColumn columnReason;
            
            private System.Data.DataColumn columnDriverName;
            
            private System.Data.DataColumn columnDateOfCompletion;
            
            private System.Data.DataColumn columnFeedBackCategory;
            
            private System.Data.DataColumn columnDateOfFeedBack;
            
            private System.Data.DataColumn columnCustomerName;
            
            private System.Data.DataColumn columnDateOfAssignment;
            
            private System.Data.DataColumn columnDetails;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsDataDataTable() {
                this.TableName = "InvestigationDetailsData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvestigationDetailsDataDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvestigationDetailsDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackIDColumn {
                get {
                    return this.columnFeedBackID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValidityColumn {
                get {
                    return this.columnValidity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReasonColumn {
                get {
                    return this.columnReason;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DriverNameColumn {
                get {
                    return this.columnDriverName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfCompletionColumn {
                get {
                    return this.columnDateOfCompletion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackCategoryColumn {
                get {
                    return this.columnFeedBackCategory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfFeedBackColumn {
                get {
                    return this.columnDateOfFeedBack;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfAssignmentColumn {
                get {
                    return this.columnDateOfAssignment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DetailsColumn {
                get {
                    return this.columnDetails;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsDataRow this[int index] {
                get {
                    return ((InvestigationDetailsDataRow)(this.Rows[index]));
                }
            }
            
            public event InvestigationDetailsDataRowChangeEventHandler InvestigationDetailsDataRowChanging;
            
            public event InvestigationDetailsDataRowChangeEventHandler InvestigationDetailsDataRowChanged;
            
            public event InvestigationDetailsDataRowChangeEventHandler InvestigationDetailsDataRowDeleting;
            
            public event InvestigationDetailsDataRowChangeEventHandler InvestigationDetailsDataRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvestigationDetailsDataRow(InvestigationDetailsDataRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsDataRow AddInvestigationDetailsDataRow(string FeedBackID, string Validity, string Reason, string DriverName, System.DateTime DateOfCompletion, string FeedBackCategory, System.DateTime DateOfFeedBack, string CustomerName, System.DateTime DateOfAssignment, string Details) {
                InvestigationDetailsDataRow rowInvestigationDetailsDataRow = ((InvestigationDetailsDataRow)(this.NewRow()));
                rowInvestigationDetailsDataRow.ItemArray = new object[] {
                        FeedBackID,
                        Validity,
                        Reason,
                        DriverName,
                        DateOfCompletion,
                        FeedBackCategory,
                        DateOfFeedBack,
                        CustomerName,
                        DateOfAssignment,
                        Details};
                this.Rows.Add(rowInvestigationDetailsDataRow);
                return rowInvestigationDetailsDataRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsDataRow FindByFeedBackID(string FeedBackID) {
                return ((InvestigationDetailsDataRow)(this.Rows.Find(new object[] {
                            FeedBackID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InvestigationDetailsDataDataTable cln = ((InvestigationDetailsDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InvestigationDetailsDataDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeedBackID = base.Columns["FeedBackID"];
                this.columnValidity = base.Columns["Validity"];
                this.columnReason = base.Columns["Reason"];
                this.columnDriverName = base.Columns["DriverName"];
                this.columnDateOfCompletion = base.Columns["DateOfCompletion"];
                this.columnFeedBackCategory = base.Columns["FeedBackCategory"];
                this.columnDateOfFeedBack = base.Columns["DateOfFeedBack"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnDateOfAssignment = base.Columns["DateOfAssignment"];
                this.columnDetails = base.Columns["Details"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeedBackID = new System.Data.DataColumn("FeedBackID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackID);
                this.columnValidity = new System.Data.DataColumn("Validity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidity);
                this.columnReason = new System.Data.DataColumn("Reason", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReason);
                this.columnDriverName = new System.Data.DataColumn("DriverName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriverName);
                this.columnDateOfCompletion = new System.Data.DataColumn("DateOfCompletion", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfCompletion);
                this.columnFeedBackCategory = new System.Data.DataColumn("FeedBackCategory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackCategory);
                this.columnDateOfFeedBack = new System.Data.DataColumn("DateOfFeedBack", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfFeedBack);
                this.columnCustomerName = new System.Data.DataColumn("CustomerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnDateOfAssignment = new System.Data.DataColumn("DateOfAssignment", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfAssignment);
                this.columnDetails = new System.Data.DataColumn("Details", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetails);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFeedBackID}, true));
                this.columnFeedBackID.AllowDBNull = false;
                this.columnFeedBackID.Unique = true;
                this.columnFeedBackID.MaxLength = 5;
                this.columnValidity.AllowDBNull = false;
                this.columnValidity.MaxLength = 10;
                this.columnReason.AllowDBNull = false;
                this.columnReason.MaxLength = 1073741823;
                this.columnDriverName.AllowDBNull = false;
                this.columnDriverName.MaxLength = 100;
                this.columnDateOfCompletion.AllowDBNull = false;
                this.columnFeedBackCategory.AllowDBNull = false;
                this.columnFeedBackCategory.MaxLength = 50;
                this.columnDateOfFeedBack.AllowDBNull = false;
                this.columnCustomerName.AllowDBNull = false;
                this.columnCustomerName.MaxLength = 100;
                this.columnDateOfAssignment.AllowDBNull = false;
                this.columnDetails.AllowDBNull = false;
                this.columnDetails.MaxLength = 1073741823;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsDataRow NewInvestigationDetailsDataRow() {
                return ((InvestigationDetailsDataRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InvestigationDetailsDataRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InvestigationDetailsDataRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvestigationDetailsDataRowChanged != null)) {
                    this.InvestigationDetailsDataRowChanged(this, new InvestigationDetailsDataRowChangeEvent(((InvestigationDetailsDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvestigationDetailsDataRowChanging != null)) {
                    this.InvestigationDetailsDataRowChanging(this, new InvestigationDetailsDataRowChangeEvent(((InvestigationDetailsDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvestigationDetailsDataRowDeleted != null)) {
                    this.InvestigationDetailsDataRowDeleted(this, new InvestigationDetailsDataRowChangeEvent(((InvestigationDetailsDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvestigationDetailsDataRowDeleting != null)) {
                    this.InvestigationDetailsDataRowDeleting(this, new InvestigationDetailsDataRowChangeEvent(((InvestigationDetailsDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvestigationDetailsDataRow(InvestigationDetailsDataRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvestigationDetailsDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CorrectiveActionsDataDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeedBackID;
            
            private System.Data.DataColumn columnActionDetails;
            
            private System.Data.DataColumn columnRepresentativeName;
            
            private System.Data.DataColumn columnDateOfClosure;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsDataDataTable() {
                this.TableName = "CorrectiveActionsData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CorrectiveActionsDataDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CorrectiveActionsDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeedBackIDColumn {
                get {
                    return this.columnFeedBackID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActionDetailsColumn {
                get {
                    return this.columnActionDetails;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepresentativeNameColumn {
                get {
                    return this.columnRepresentativeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfClosureColumn {
                get {
                    return this.columnDateOfClosure;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsDataRow this[int index] {
                get {
                    return ((CorrectiveActionsDataRow)(this.Rows[index]));
                }
            }
            
            public event CorrectiveActionsDataRowChangeEventHandler CorrectiveActionsDataRowChanging;
            
            public event CorrectiveActionsDataRowChangeEventHandler CorrectiveActionsDataRowChanged;
            
            public event CorrectiveActionsDataRowChangeEventHandler CorrectiveActionsDataRowDeleting;
            
            public event CorrectiveActionsDataRowChangeEventHandler CorrectiveActionsDataRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCorrectiveActionsDataRow(CorrectiveActionsDataRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsDataRow AddCorrectiveActionsDataRow(FeedBackRow parentFeedBackRowByFK__Correctiv__FeedB__08EA57931, string ActionDetails, string RepresentativeName, System.DateTime DateOfClosure) {
                CorrectiveActionsDataRow rowCorrectiveActionsDataRow = ((CorrectiveActionsDataRow)(this.NewRow()));
                rowCorrectiveActionsDataRow.ItemArray = new object[] {
                        parentFeedBackRowByFK__Correctiv__FeedB__08EA57931[0],
                        ActionDetails,
                        RepresentativeName,
                        DateOfClosure};
                this.Rows.Add(rowCorrectiveActionsDataRow);
                return rowCorrectiveActionsDataRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsDataRow FindByFeedBackID(string FeedBackID) {
                return ((CorrectiveActionsDataRow)(this.Rows.Find(new object[] {
                            FeedBackID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CorrectiveActionsDataDataTable cln = ((CorrectiveActionsDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CorrectiveActionsDataDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeedBackID = base.Columns["FeedBackID"];
                this.columnActionDetails = base.Columns["ActionDetails"];
                this.columnRepresentativeName = base.Columns["RepresentativeName"];
                this.columnDateOfClosure = base.Columns["DateOfClosure"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeedBackID = new System.Data.DataColumn("FeedBackID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeedBackID);
                this.columnActionDetails = new System.Data.DataColumn("ActionDetails", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnActionDetails);
                this.columnRepresentativeName = new System.Data.DataColumn("RepresentativeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepresentativeName);
                this.columnDateOfClosure = new System.Data.DataColumn("DateOfClosure", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfClosure);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFeedBackID}, true));
                this.columnFeedBackID.AllowDBNull = false;
                this.columnFeedBackID.Unique = true;
                this.columnFeedBackID.MaxLength = 5;
                this.columnActionDetails.AllowDBNull = false;
                this.columnActionDetails.MaxLength = 1073741823;
                this.columnRepresentativeName.AllowDBNull = false;
                this.columnRepresentativeName.MaxLength = 100;
                this.columnDateOfClosure.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsDataRow NewCorrectiveActionsDataRow() {
                return ((CorrectiveActionsDataRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CorrectiveActionsDataRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CorrectiveActionsDataRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CorrectiveActionsDataRowChanged != null)) {
                    this.CorrectiveActionsDataRowChanged(this, new CorrectiveActionsDataRowChangeEvent(((CorrectiveActionsDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CorrectiveActionsDataRowChanging != null)) {
                    this.CorrectiveActionsDataRowChanging(this, new CorrectiveActionsDataRowChangeEvent(((CorrectiveActionsDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CorrectiveActionsDataRowDeleted != null)) {
                    this.CorrectiveActionsDataRowDeleted(this, new CorrectiveActionsDataRowChangeEvent(((CorrectiveActionsDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CorrectiveActionsDataRowDeleting != null)) {
                    this.CorrectiveActionsDataRowDeleting(this, new CorrectiveActionsDataRowChangeEvent(((CorrectiveActionsDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCorrectiveActionsDataRow(CorrectiveActionsDataRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CorrectiveActionsDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServicesDetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnStartingPoint;
            
            private System.Data.DataColumn columnDestination;
            
            private System.Data.DataColumn columnAgency;
            
            private System.Data.DataColumn columnContactPerson;
            
            private System.Data.DataColumn columnEmail;
            
            private System.Data.DataColumn columnPhoneNo;
            
            private System.Data.DataColumn columnServices;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServicesDetailsDataTable() {
                this.TableName = "ServicesDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServicesDetailsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServicesDetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StartingPointColumn {
                get {
                    return this.columnStartingPoint;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestinationColumn {
                get {
                    return this.columnDestination;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AgencyColumn {
                get {
                    return this.columnAgency;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContactPersonColumn {
                get {
                    return this.columnContactPerson;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PhoneNoColumn {
                get {
                    return this.columnPhoneNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServicesColumn {
                get {
                    return this.columnServices;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServicesDetailsRow this[int index] {
                get {
                    return ((ServicesDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ServicesDetailsRowChangeEventHandler ServicesDetailsRowChanging;
            
            public event ServicesDetailsRowChangeEventHandler ServicesDetailsRowChanged;
            
            public event ServicesDetailsRowChangeEventHandler ServicesDetailsRowDeleting;
            
            public event ServicesDetailsRowChangeEventHandler ServicesDetailsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServicesDetailsRow(ServicesDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServicesDetailsRow AddServicesDetailsRow(string StartingPoint, string Destination, string Agency, string ContactPerson, string Email, string PhoneNo, string Services) {
                ServicesDetailsRow rowServicesDetailsRow = ((ServicesDetailsRow)(this.NewRow()));
                rowServicesDetailsRow.ItemArray = new object[] {
                        StartingPoint,
                        Destination,
                        Agency,
                        ContactPerson,
                        Email,
                        PhoneNo,
                        Services};
                this.Rows.Add(rowServicesDetailsRow);
                return rowServicesDetailsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServicesDetailsDataTable cln = ((ServicesDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServicesDetailsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStartingPoint = base.Columns["StartingPoint"];
                this.columnDestination = base.Columns["Destination"];
                this.columnAgency = base.Columns["Agency"];
                this.columnContactPerson = base.Columns["ContactPerson"];
                this.columnEmail = base.Columns["Email"];
                this.columnPhoneNo = base.Columns["PhoneNo"];
                this.columnServices = base.Columns["Services"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStartingPoint = new System.Data.DataColumn("StartingPoint", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartingPoint);
                this.columnDestination = new System.Data.DataColumn("Destination", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestination);
                this.columnAgency = new System.Data.DataColumn("Agency", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgency);
                this.columnContactPerson = new System.Data.DataColumn("ContactPerson", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactPerson);
                this.columnEmail = new System.Data.DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnPhoneNo = new System.Data.DataColumn("PhoneNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNo);
                this.columnServices = new System.Data.DataColumn("Services", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnServices);
                this.columnStartingPoint.AllowDBNull = false;
                this.columnStartingPoint.MaxLength = 100;
                this.columnDestination.AllowDBNull = false;
                this.columnDestination.MaxLength = 100;
                this.columnAgency.AllowDBNull = false;
                this.columnAgency.MaxLength = 100;
                this.columnContactPerson.AllowDBNull = false;
                this.columnContactPerson.MaxLength = 100;
                this.columnEmail.AllowDBNull = false;
                this.columnEmail.MaxLength = 100;
                this.columnPhoneNo.AllowDBNull = false;
                this.columnPhoneNo.MaxLength = 20;
                this.columnServices.AllowDBNull = false;
                this.columnServices.MaxLength = 1073741823;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServicesDetailsRow NewServicesDetailsRow() {
                return ((ServicesDetailsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServicesDetailsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServicesDetailsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServicesDetailsRowChanged != null)) {
                    this.ServicesDetailsRowChanged(this, new ServicesDetailsRowChangeEvent(((ServicesDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServicesDetailsRowChanging != null)) {
                    this.ServicesDetailsRowChanging(this, new ServicesDetailsRowChangeEvent(((ServicesDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServicesDetailsRowDeleted != null)) {
                    this.ServicesDetailsRowDeleted(this, new ServicesDetailsRowChangeEvent(((ServicesDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServicesDetailsRowDeleting != null)) {
                    this.ServicesDetailsRowDeleting(this, new ServicesDetailsRowChangeEvent(((ServicesDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServicesDetailsRow(ServicesDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServicesDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CorrectiveActionsRow : System.Data.DataRow {
            
            private CorrectiveActionsDataTable tableCorrectiveActions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CorrectiveActionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCorrectiveActions = ((CorrectiveActionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackID {
                get {
                    return ((string)(this[this.tableCorrectiveActions.FeedBackIDColumn]));
                }
                set {
                    this[this.tableCorrectiveActions.FeedBackIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActionDetails {
                get {
                    return ((string)(this[this.tableCorrectiveActions.ActionDetailsColumn]));
                }
                set {
                    this[this.tableCorrectiveActions.ActionDetailsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepresentativeID {
                get {
                    return ((string)(this[this.tableCorrectiveActions.RepresentativeIDColumn]));
                }
                set {
                    this[this.tableCorrectiveActions.RepresentativeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow FeedBackRow {
                get {
                    return ((FeedBackRow)(this.GetParentRow(this.Table.ParentRelations["FK__Correctiv__FeedB__08EA5793"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Correctiv__FeedB__08EA5793"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow EmployeeRow {
                get {
                    return ((EmployeeRow)(this.GetParentRow(this.Table.ParentRelations["FK__Correctiv__Repre__09DE7BCC"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Correctiv__Repre__09DE7BCC"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerRow : System.Data.DataRow {
            
            private CustomerDataTable tableCustomer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomer = ((CustomerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerID {
                get {
                    return ((string)(this[this.tableCustomer.CustomerIDColumn]));
                }
                set {
                    this[this.tableCustomer.CustomerIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    return ((string)(this[this.tableCustomer.CustomerNameColumn]));
                }
                set {
                    this[this.tableCustomer.CustomerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    return ((string)(this[this.tableCustomer.AddressColumn]));
                }
                set {
                    this[this.tableCustomer.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    return ((string)(this[this.tableCustomer.CityColumn]));
                }
                set {
                    this[this.tableCustomer.CityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableCustomer.StateColumn]));
                }
                set {
                    this[this.tableCustomer.StateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZipCode {
                get {
                    return ((string)(this[this.tableCustomer.ZipCodeColumn]));
                }
                set {
                    this[this.tableCustomer.ZipCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    return ((string)(this[this.tableCustomer.EmailColumn]));
                }
                set {
                    this[this.tableCustomer.EmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactNumber {
                get {
                    return ((string)(this[this.tableCustomer.ContactNumberColumn]));
                }
                set {
                    this[this.tableCustomer.ContactNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow[] GetFeedBackRows() {
                return ((FeedBackRow[])(base.GetChildRows(this.Table.ChildRelations["FK__FeedBack__Custom__00551192"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DepartmentRow : System.Data.DataRow {
            
            private DepartmentDataTable tableDepartment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DepartmentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDepartment = ((DepartmentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentID {
                get {
                    return ((string)(this[this.tableDepartment.DepartmentIDColumn]));
                }
                set {
                    this[this.tableDepartment.DepartmentIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentName {
                get {
                    return ((string)(this[this.tableDepartment.DepartmentNameColumn]));
                }
                set {
                    this[this.tableDepartment.DepartmentNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow[] GetEmployeeRows() {
                return ((EmployeeRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Employee__Depart__7B905C75"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow[] GetFeedBackRows() {
                return ((FeedBackRow[])(base.GetChildRows(this.Table.ChildRelations["FK__FeedBack__Depart__023D5A04"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DriverRow : System.Data.DataRow {
            
            private DriverDataTable tableDriver;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DriverRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDriver = ((DriverDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriverID {
                get {
                    return ((string)(this[this.tableDriver.DriverIDColumn]));
                }
                set {
                    this[this.tableDriver.DriverIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriverName {
                get {
                    return ((string)(this[this.tableDriver.DriverNameColumn]));
                }
                set {
                    this[this.tableDriver.DriverNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    return ((string)(this[this.tableDriver.AddressColumn]));
                }
                set {
                    this[this.tableDriver.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Age {
                get {
                    return ((int)(this[this.tableDriver.AgeColumn]));
                }
                set {
                    this[this.tableDriver.AgeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LicenseNumber {
                get {
                    return ((string)(this[this.tableDriver.LicenseNumberColumn]));
                }
                set {
                    this[this.tableDriver.LicenseNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsRow[] GetInvestigationDetailsRows() {
                return ((InvestigationDetailsRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Investiga__Drive__07020F21"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeRow : System.Data.DataRow {
            
            private EmployeeDataTable tableEmployee;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployee = ((EmployeeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeID {
                get {
                    return ((string)(this[this.tableEmployee.EmployeeIDColumn]));
                }
                set {
                    this[this.tableEmployee.EmployeeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    return ((string)(this[this.tableEmployee.EmployeeNameColumn]));
                }
                set {
                    this[this.tableEmployee.EmployeeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    return ((string)(this[this.tableEmployee.AddressColumn]));
                }
                set {
                    this[this.tableEmployee.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfBirth {
                get {
                    return ((System.DateTime)(this[this.tableEmployee.DateOfBirthColumn]));
                }
                set {
                    this[this.tableEmployee.DateOfBirthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfJoininng {
                get {
                    return ((System.DateTime)(this[this.tableEmployee.DateOfJoininngColumn]));
                }
                set {
                    this[this.tableEmployee.DateOfJoininngColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designation {
                get {
                    return ((string)(this[this.tableEmployee.DesignationColumn]));
                }
                set {
                    this[this.tableEmployee.DesignationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentID {
                get {
                    return ((string)(this[this.tableEmployee.DepartmentIDColumn]));
                }
                set {
                    this[this.tableEmployee.DepartmentIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableEmployee.PasswordColumn]));
                }
                set {
                    this[this.tableEmployee.PasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow DepartmentRow {
                get {
                    return ((DepartmentRow)(this.GetParentRow(this.Table.ParentRelations["FK__Employee__Depart__7B905C75"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Employee__Depart__7B905C75"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrentEmployeeRow CurrentEmployeeRow {
                get {
                    return ((CurrentEmployeeRow)(this.GetParentRow(this.Table.ParentRelations["FK__Employee__Depart__7B905C751"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Employee__Depart__7B905C751"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsRow[] GetCorrectiveActionsRows() {
                return ((CorrectiveActionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Correctiv__Repre__09DE7BCC"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow[] GetFeedBackRowsByFK__FeedBack__Assign__03317E3D() {
                return ((FeedBackRow[])(base.GetChildRows(this.Table.ChildRelations["FK__FeedBack__Assign__03317E3D"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow[] GetFeedBackRowsByFK__FeedBack__Assign__0425A276() {
                return ((FeedBackRow[])(base.GetChildRows(this.Table.ChildRelations["FK__FeedBack__Assign__0425A276"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow[] GetFeedBackRowsByFK__FeedBack__Repres__014935CB() {
                return ((FeedBackRow[])(base.GetChildRows(this.Table.ChildRelations["FK__FeedBack__Repres__014935CB"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FeedBackRow : System.Data.DataRow {
            
            private FeedBackDataTable tableFeedBack;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FeedBackRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFeedBack = ((FeedBackDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackID {
                get {
                    return ((string)(this[this.tableFeedBack.FeedBackIDColumn]));
                }
                set {
                    this[this.tableFeedBack.FeedBackIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerID {
                get {
                    return ((string)(this[this.tableFeedBack.CustomerIDColumn]));
                }
                set {
                    this[this.tableFeedBack.CustomerIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepresentativeID {
                get {
                    return ((string)(this[this.tableFeedBack.RepresentativeIDColumn]));
                }
                set {
                    this[this.tableFeedBack.RepresentativeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfFeedBack {
                get {
                    return ((System.DateTime)(this[this.tableFeedBack.DateOfFeedBackColumn]));
                }
                set {
                    this[this.tableFeedBack.DateOfFeedBackColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackSource {
                get {
                    return ((string)(this[this.tableFeedBack.FeedBackSourceColumn]));
                }
                set {
                    this[this.tableFeedBack.FeedBackSourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackType {
                get {
                    return ((string)(this[this.tableFeedBack.FeedBackTypeColumn]));
                }
                set {
                    this[this.tableFeedBack.FeedBackTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackCategory {
                get {
                    return ((string)(this[this.tableFeedBack.FeedBackCategoryColumn]));
                }
                set {
                    this[this.tableFeedBack.FeedBackCategoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableFeedBack.DescriptionColumn]));
                }
                set {
                    this[this.tableFeedBack.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentID {
                get {
                    return ((string)(this[this.tableFeedBack.DepartmentIDColumn]));
                }
                set {
                    this[this.tableFeedBack.DepartmentIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime IncidentDate {
                get {
                    return ((System.DateTime)(this[this.tableFeedBack.IncidentDateColumn]));
                }
                set {
                    this[this.tableFeedBack.IncidentDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncidentPlace {
                get {
                    return ((string)(this[this.tableFeedBack.IncidentPlaceColumn]));
                }
                set {
                    this[this.tableFeedBack.IncidentPlaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BusStop {
                get {
                    return ((string)(this[this.tableFeedBack.BusStopColumn]));
                }
                set {
                    this[this.tableFeedBack.BusStopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VehicleNumber {
                get {
                    return ((string)(this[this.tableFeedBack.VehicleNumberColumn]));
                }
                set {
                    this[this.tableFeedBack.VehicleNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssignerID {
                get {
                    return ((string)(this[this.tableFeedBack.AssignerIDColumn]));
                }
                set {
                    this[this.tableFeedBack.AssignerIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssigneeID {
                get {
                    return ((string)(this[this.tableFeedBack.AssigneeIDColumn]));
                }
                set {
                    this[this.tableFeedBack.AssigneeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfCompletion {
                get {
                    return ((System.DateTime)(this[this.tableFeedBack.DateOfCompletionColumn]));
                }
                set {
                    this[this.tableFeedBack.DateOfCompletionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfClosure {
                get {
                    return ((System.DateTime)(this[this.tableFeedBack.DateOfClosureColumn]));
                }
                set {
                    this[this.tableFeedBack.DateOfClosureColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableFeedBack.StatusColumn]));
                }
                set {
                    this[this.tableFeedBack.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfAssignment {
                get {
                    return ((System.DateTime)(this[this.tableFeedBack.DateOfAssignmentColumn]));
                }
                set {
                    this[this.tableFeedBack.DateOfAssignmentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow EmployeeRowByFK__FeedBack__Assign__03317E3D {
                get {
                    return ((EmployeeRow)(this.GetParentRow(this.Table.ParentRelations["FK__FeedBack__Assign__03317E3D"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__FeedBack__Assign__03317E3D"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow EmployeeRowByFK__FeedBack__Assign__0425A276 {
                get {
                    return ((EmployeeRow)(this.GetParentRow(this.Table.ParentRelations["FK__FeedBack__Assign__0425A276"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__FeedBack__Assign__0425A276"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow CustomerRow {
                get {
                    return ((CustomerRow)(this.GetParentRow(this.Table.ParentRelations["FK__FeedBack__Custom__00551192"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__FeedBack__Custom__00551192"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow DepartmentRow {
                get {
                    return ((DepartmentRow)(this.GetParentRow(this.Table.ParentRelations["FK__FeedBack__Depart__023D5A04"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__FeedBack__Depart__023D5A04"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow EmployeeRowByFK__FeedBack__Repres__014935CB {
                get {
                    return ((EmployeeRow)(this.GetParentRow(this.Table.ParentRelations["FK__FeedBack__Repres__014935CB"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__FeedBack__Repres__014935CB"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrentEmployeeRow CurrentEmployeeRow {
                get {
                    return ((CurrentEmployeeRow)(this.GetParentRow(this.Table.ParentRelations["FK__FeedBack__Depart__023D5A041"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__FeedBack__Depart__023D5A041"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsRow[] GetCorrectiveActionsRows() {
                return ((CorrectiveActionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Correctiv__FeedB__08EA5793"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsRow[] GetInvestigationDetailsRows() {
                return ((InvestigationDetailsRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Investiga__FeedB__060DEAE8"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsDataRow[] GetCorrectiveActionsDataRows() {
                return ((CorrectiveActionsDataRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Correctiv__FeedB__08EA57931"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvestigationDetailsRow : System.Data.DataRow {
            
            private InvestigationDetailsDataTable tableInvestigationDetails;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvestigationDetailsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvestigationDetails = ((InvestigationDetailsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackID {
                get {
                    return ((string)(this[this.tableInvestigationDetails.FeedBackIDColumn]));
                }
                set {
                    this[this.tableInvestigationDetails.FeedBackIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Validity {
                get {
                    return ((string)(this[this.tableInvestigationDetails.ValidityColumn]));
                }
                set {
                    this[this.tableInvestigationDetails.ValidityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reason {
                get {
                    return ((string)(this[this.tableInvestigationDetails.ReasonColumn]));
                }
                set {
                    this[this.tableInvestigationDetails.ReasonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriverID {
                get {
                    return ((string)(this[this.tableInvestigationDetails.DriverIDColumn]));
                }
                set {
                    this[this.tableInvestigationDetails.DriverIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Details {
                get {
                    return ((string)(this[this.tableInvestigationDetails.DetailsColumn]));
                }
                set {
                    this[this.tableInvestigationDetails.DetailsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRow DriverRow {
                get {
                    return ((DriverRow)(this.GetParentRow(this.Table.ParentRelations["FK__Investiga__Drive__07020F21"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Investiga__Drive__07020F21"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow FeedBackRow {
                get {
                    return ((FeedBackRow)(this.GetParentRow(this.Table.ParentRelations["FK__Investiga__FeedB__060DEAE8"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Investiga__FeedB__060DEAE8"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CurrentEmployeeRow : System.Data.DataRow {
            
            private CurrentEmployeeDataTable tableCurrentEmployee;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CurrentEmployeeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCurrentEmployee = ((CurrentEmployeeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeID {
                get {
                    return ((string)(this[this.tableCurrentEmployee.EmployeeIDColumn]));
                }
                set {
                    this[this.tableCurrentEmployee.EmployeeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    return ((string)(this[this.tableCurrentEmployee.EmployeeNameColumn]));
                }
                set {
                    this[this.tableCurrentEmployee.EmployeeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designation {
                get {
                    return ((string)(this[this.tableCurrentEmployee.DesignationColumn]));
                }
                set {
                    this[this.tableCurrentEmployee.DesignationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentID {
                get {
                    return ((string)(this[this.tableCurrentEmployee.DepartmentIDColumn]));
                }
                set {
                    this[this.tableCurrentEmployee.DepartmentIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentName {
                get {
                    return ((string)(this[this.tableCurrentEmployee.DepartmentNameColumn]));
                }
                set {
                    this[this.tableCurrentEmployee.DepartmentNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow[] GetEmployeeRows() {
                return ((EmployeeRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Employee__Depart__7B905C751"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow[] GetFeedBackRows() {
                return ((FeedBackRow[])(base.GetChildRows(this.Table.ChildRelations["FK__FeedBack__Depart__023D5A041"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FeedBackDataRow : System.Data.DataRow {
            
            private FeedBackDataDataTable tableFeedBackData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FeedBackDataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFeedBackData = ((FeedBackDataDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackID {
                get {
                    return ((string)(this[this.tableFeedBackData.FeedBackIDColumn]));
                }
                set {
                    this[this.tableFeedBackData.FeedBackIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    return ((string)(this[this.tableFeedBackData.CustomerNameColumn]));
                }
                set {
                    this[this.tableFeedBackData.CustomerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepresentativeName {
                get {
                    return ((string)(this[this.tableFeedBackData.RepresentativeNameColumn]));
                }
                set {
                    this[this.tableFeedBackData.RepresentativeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfFeedBack {
                get {
                    return ((System.DateTime)(this[this.tableFeedBackData.DateOfFeedBackColumn]));
                }
                set {
                    this[this.tableFeedBackData.DateOfFeedBackColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackSource {
                get {
                    return ((string)(this[this.tableFeedBackData.FeedBackSourceColumn]));
                }
                set {
                    this[this.tableFeedBackData.FeedBackSourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackType {
                get {
                    return ((string)(this[this.tableFeedBackData.FeedBackTypeColumn]));
                }
                set {
                    this[this.tableFeedBackData.FeedBackTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackCategory {
                get {
                    return ((string)(this[this.tableFeedBackData.FeedBackCategoryColumn]));
                }
                set {
                    this[this.tableFeedBackData.FeedBackCategoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableFeedBackData.DescriptionColumn]));
                }
                set {
                    this[this.tableFeedBackData.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentName {
                get {
                    return ((string)(this[this.tableFeedBackData.DepartmentNameColumn]));
                }
                set {
                    this[this.tableFeedBackData.DepartmentNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime IncidentDate {
                get {
                    return ((System.DateTime)(this[this.tableFeedBackData.IncidentDateColumn]));
                }
                set {
                    this[this.tableFeedBackData.IncidentDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncidentPlace {
                get {
                    return ((string)(this[this.tableFeedBackData.IncidentPlaceColumn]));
                }
                set {
                    this[this.tableFeedBackData.IncidentPlaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BusStop {
                get {
                    return ((string)(this[this.tableFeedBackData.BusStopColumn]));
                }
                set {
                    this[this.tableFeedBackData.BusStopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VehicleNumber {
                get {
                    return ((string)(this[this.tableFeedBackData.VehicleNumberColumn]));
                }
                set {
                    this[this.tableFeedBackData.VehicleNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssignerName {
                get {
                    return ((string)(this[this.tableFeedBackData.AssignerNameColumn]));
                }
                set {
                    this[this.tableFeedBackData.AssignerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssigneeName {
                get {
                    return ((string)(this[this.tableFeedBackData.AssigneeNameColumn]));
                }
                set {
                    this[this.tableFeedBackData.AssigneeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableFeedBackData.StatusColumn]));
                }
                set {
                    this[this.tableFeedBackData.StatusColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ComplaintRow : System.Data.DataRow {
            
            private ComplaintDataTable tableComplaint;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComplaintRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableComplaint = ((ComplaintDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackID {
                get {
                    return ((string)(this[this.tableComplaint.FeedBackIDColumn]));
                }
                set {
                    this[this.tableComplaint.FeedBackIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    return ((string)(this[this.tableComplaint.CustomerNameColumn]));
                }
                set {
                    this[this.tableComplaint.CustomerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepresentativeName {
                get {
                    return ((string)(this[this.tableComplaint.RepresentativeNameColumn]));
                }
                set {
                    this[this.tableComplaint.RepresentativeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfFeedBack {
                get {
                    return ((System.DateTime)(this[this.tableComplaint.DateOfFeedBackColumn]));
                }
                set {
                    this[this.tableComplaint.DateOfFeedBackColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackSource {
                get {
                    return ((string)(this[this.tableComplaint.FeedBackSourceColumn]));
                }
                set {
                    this[this.tableComplaint.FeedBackSourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackType {
                get {
                    return ((string)(this[this.tableComplaint.FeedBackTypeColumn]));
                }
                set {
                    this[this.tableComplaint.FeedBackTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackCategory {
                get {
                    return ((string)(this[this.tableComplaint.FeedBackCategoryColumn]));
                }
                set {
                    this[this.tableComplaint.FeedBackCategoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableComplaint.DescriptionColumn]));
                }
                set {
                    this[this.tableComplaint.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentName {
                get {
                    return ((string)(this[this.tableComplaint.DepartmentNameColumn]));
                }
                set {
                    this[this.tableComplaint.DepartmentNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime IncidentDate {
                get {
                    return ((System.DateTime)(this[this.tableComplaint.IncidentDateColumn]));
                }
                set {
                    this[this.tableComplaint.IncidentDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncidentPlace {
                get {
                    return ((string)(this[this.tableComplaint.IncidentPlaceColumn]));
                }
                set {
                    this[this.tableComplaint.IncidentPlaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BusStop {
                get {
                    return ((string)(this[this.tableComplaint.BusStopColumn]));
                }
                set {
                    this[this.tableComplaint.BusStopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VehicleNumber {
                get {
                    return ((string)(this[this.tableComplaint.VehicleNumberColumn]));
                }
                set {
                    this[this.tableComplaint.VehicleNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssignerName {
                get {
                    return ((string)(this[this.tableComplaint.AssignerNameColumn]));
                }
                set {
                    this[this.tableComplaint.AssignerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssigneeName {
                get {
                    return ((string)(this[this.tableComplaint.AssigneeNameColumn]));
                }
                set {
                    this[this.tableComplaint.AssigneeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableComplaint.StatusColumn]));
                }
                set {
                    this[this.tableComplaint.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssigneeID {
                get {
                    return ((string)(this[this.tableComplaint.AssigneeIDColumn]));
                }
                set {
                    this[this.tableComplaint.AssigneeIDColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvestigationDetailsDataRow : System.Data.DataRow {
            
            private InvestigationDetailsDataDataTable tableInvestigationDetailsData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvestigationDetailsDataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvestigationDetailsData = ((InvestigationDetailsDataDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackID {
                get {
                    return ((string)(this[this.tableInvestigationDetailsData.FeedBackIDColumn]));
                }
                set {
                    this[this.tableInvestigationDetailsData.FeedBackIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Validity {
                get {
                    return ((string)(this[this.tableInvestigationDetailsData.ValidityColumn]));
                }
                set {
                    this[this.tableInvestigationDetailsData.ValidityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reason {
                get {
                    return ((string)(this[this.tableInvestigationDetailsData.ReasonColumn]));
                }
                set {
                    this[this.tableInvestigationDetailsData.ReasonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriverName {
                get {
                    return ((string)(this[this.tableInvestigationDetailsData.DriverNameColumn]));
                }
                set {
                    this[this.tableInvestigationDetailsData.DriverNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfCompletion {
                get {
                    return ((System.DateTime)(this[this.tableInvestigationDetailsData.DateOfCompletionColumn]));
                }
                set {
                    this[this.tableInvestigationDetailsData.DateOfCompletionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackCategory {
                get {
                    return ((string)(this[this.tableInvestigationDetailsData.FeedBackCategoryColumn]));
                }
                set {
                    this[this.tableInvestigationDetailsData.FeedBackCategoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfFeedBack {
                get {
                    return ((System.DateTime)(this[this.tableInvestigationDetailsData.DateOfFeedBackColumn]));
                }
                set {
                    this[this.tableInvestigationDetailsData.DateOfFeedBackColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    return ((string)(this[this.tableInvestigationDetailsData.CustomerNameColumn]));
                }
                set {
                    this[this.tableInvestigationDetailsData.CustomerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfAssignment {
                get {
                    return ((System.DateTime)(this[this.tableInvestigationDetailsData.DateOfAssignmentColumn]));
                }
                set {
                    this[this.tableInvestigationDetailsData.DateOfAssignmentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Details {
                get {
                    return ((string)(this[this.tableInvestigationDetailsData.DetailsColumn]));
                }
                set {
                    this[this.tableInvestigationDetailsData.DetailsColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CorrectiveActionsDataRow : System.Data.DataRow {
            
            private CorrectiveActionsDataDataTable tableCorrectiveActionsData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CorrectiveActionsDataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCorrectiveActionsData = ((CorrectiveActionsDataDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeedBackID {
                get {
                    return ((string)(this[this.tableCorrectiveActionsData.FeedBackIDColumn]));
                }
                set {
                    this[this.tableCorrectiveActionsData.FeedBackIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActionDetails {
                get {
                    return ((string)(this[this.tableCorrectiveActionsData.ActionDetailsColumn]));
                }
                set {
                    this[this.tableCorrectiveActionsData.ActionDetailsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepresentativeName {
                get {
                    return ((string)(this[this.tableCorrectiveActionsData.RepresentativeNameColumn]));
                }
                set {
                    this[this.tableCorrectiveActionsData.RepresentativeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfClosure {
                get {
                    return ((System.DateTime)(this[this.tableCorrectiveActionsData.DateOfClosureColumn]));
                }
                set {
                    this[this.tableCorrectiveActionsData.DateOfClosureColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow FeedBackRow {
                get {
                    return ((FeedBackRow)(this.GetParentRow(this.Table.ParentRelations["FK__Correctiv__FeedB__08EA57931"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Correctiv__FeedB__08EA57931"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServicesDetailsRow : System.Data.DataRow {
            
            private ServicesDetailsDataTable tableServicesDetails;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServicesDetailsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServicesDetails = ((ServicesDetailsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartingPoint {
                get {
                    return ((string)(this[this.tableServicesDetails.StartingPointColumn]));
                }
                set {
                    this[this.tableServicesDetails.StartingPointColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Destination {
                get {
                    return ((string)(this[this.tableServicesDetails.DestinationColumn]));
                }
                set {
                    this[this.tableServicesDetails.DestinationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Agency {
                get {
                    return ((string)(this[this.tableServicesDetails.AgencyColumn]));
                }
                set {
                    this[this.tableServicesDetails.AgencyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactPerson {
                get {
                    return ((string)(this[this.tableServicesDetails.ContactPersonColumn]));
                }
                set {
                    this[this.tableServicesDetails.ContactPersonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    return ((string)(this[this.tableServicesDetails.EmailColumn]));
                }
                set {
                    this[this.tableServicesDetails.EmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNo {
                get {
                    return ((string)(this[this.tableServicesDetails.PhoneNoColumn]));
                }
                set {
                    this[this.tableServicesDetails.PhoneNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Services {
                get {
                    return ((string)(this[this.tableServicesDetails.ServicesColumn]));
                }
                set {
                    this[this.tableServicesDetails.ServicesColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CorrectiveActionsRowChangeEvent : System.EventArgs {
            
            private CorrectiveActionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsRowChangeEvent(CorrectiveActionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerRowChangeEvent : System.EventArgs {
            
            private CustomerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRowChangeEvent(CustomerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DepartmentRowChangeEvent : System.EventArgs {
            
            private DepartmentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRowChangeEvent(DepartmentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DriverRowChangeEvent : System.EventArgs {
            
            private DriverRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRowChangeEvent(DriverRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DriverRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeRowChangeEvent : System.EventArgs {
            
            private EmployeeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRowChangeEvent(EmployeeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FeedBackRowChangeEvent : System.EventArgs {
            
            private FeedBackRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRowChangeEvent(FeedBackRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvestigationDetailsRowChangeEvent : System.EventArgs {
            
            private InvestigationDetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsRowChangeEvent(InvestigationDetailsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CurrentEmployeeRowChangeEvent : System.EventArgs {
            
            private CurrentEmployeeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrentEmployeeRowChangeEvent(CurrentEmployeeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrentEmployeeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FeedBackDataRowChangeEvent : System.EventArgs {
            
            private FeedBackDataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackDataRowChangeEvent(FeedBackDataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeedBackDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ComplaintRowChangeEvent : System.EventArgs {
            
            private ComplaintRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplaintRowChangeEvent(ComplaintRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplaintRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvestigationDetailsDataRowChangeEvent : System.EventArgs {
            
            private InvestigationDetailsDataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsDataRowChangeEvent(InvestigationDetailsDataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvestigationDetailsDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CorrectiveActionsDataRowChangeEvent : System.EventArgs {
            
            private CorrectiveActionsDataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsDataRowChangeEvent(CorrectiveActionsDataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectiveActionsDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServicesDetailsRowChangeEvent : System.EventArgs {
            
            private ServicesDetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServicesDetailsRowChangeEvent(ServicesDetailsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServicesDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace TraveLineTransitServices.DataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CorrectiveActionsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CorrectiveActionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CorrectiveActions";
            tableMapping.ColumnMappings.Add("FeedBackID", "FeedBackID");
            tableMapping.ColumnMappings.Add("ActionDetails", "ActionDetails");
            tableMapping.ColumnMappings.Add("RepresentativeID", "RepresentativeID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CorrectiveActions] ([FeedBackID], [ActionDetails], [Representa" +
                "tiveID]) VALUES (@FeedBackID, @ActionDetails, @RepresentativeID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ActionDetails", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "ActionDetails", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RepresentativeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "RepresentativeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FeedBackID, ActionDetails, RepresentativeID FROM dbo.CorrectiveActions";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.CorrectiveActionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.CorrectiveActionsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.CorrectiveActionsDataTable dataTable = new DataSet.CorrectiveActionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.CorrectiveActionsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "CorrectiveActions");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string FeedBackID, string ActionDetails, string RepresentativeID) {
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(FeedBackID));
            }
            if ((ActionDetails == null)) {
                throw new System.ArgumentNullException("ActionDetails");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ActionDetails));
            }
            if ((RepresentativeID == null)) {
                throw new System.ArgumentNullException("RepresentativeID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(RepresentativeID));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CustomerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Customer";
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID");
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("ZipCode", "ZipCode");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("ContactNumber", "ContactNumber");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Customer] WHERE (([CustomerID] = @Original_CustomerID) AND ([CustomerName] = @Original_CustomerName) AND ([Address] = @Original_Address) AND ([City] = @Original_City) AND ([State] = @Original_State) AND ([ZipCode] = @Original_ZipCode) AND ([Email] = @Original_Email) AND ([ContactNumber] = @Original_ContactNumber))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CustomerName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_City", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_State", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "State", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ZipCode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ZipCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContactNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Customer] ([CustomerID], [CustomerName], [Address], [City], [State], [ZipCode], [Email], [ContactNumber]) VALUES (@CustomerID, @CustomerName, @Address, @City, @State, @ZipCode, @Email, @ContactNumber);
SELECT CustomerID, CustomerName, Address, City, State, ZipCode, Email, ContactNumber FROM Customer WHERE (CustomerID = @CustomerID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CustomerName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@City", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@State", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "State", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ZipCode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ZipCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Customer] SET [CustomerID] = @CustomerID, [CustomerName] = @CustomerName, [Address] = @Address, [City] = @City, [State] = @State, [ZipCode] = @ZipCode, [Email] = @Email, [ContactNumber] = @ContactNumber WHERE (([CustomerID] = @Original_CustomerID) AND ([CustomerName] = @Original_CustomerName) AND ([Address] = @Original_Address) AND ([City] = @Original_City) AND ([State] = @Original_State) AND ([ZipCode] = @Original_ZipCode) AND ([Email] = @Original_Email) AND ([ContactNumber] = @Original_ContactNumber));
SELECT CustomerID, CustomerName, Address, City, State, ZipCode, Email, ContactNumber FROM Customer WHERE (CustomerID = @CustomerID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CustomerName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@City", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@State", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "State", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ZipCode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ZipCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CustomerName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_City", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "City", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_State", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "State", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ZipCode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ZipCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContactNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CustomerID, CustomerName, Address, City, State, ZipCode, Email, ContactNum" +
                "ber FROM dbo.Customer";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.CustomerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.CustomerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.CustomerDataTable dataTable = new DataSet.CustomerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.CustomerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "Customer");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CustomerID, string Original_CustomerName, string Original_Address, string Original_City, string Original_State, string Original_ZipCode, string Original_Email, string Original_ContactNumber) {
            if ((Original_CustomerID == null)) {
                throw new System.ArgumentNullException("Original_CustomerID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CustomerID));
            }
            if ((Original_CustomerName == null)) {
                throw new System.ArgumentNullException("Original_CustomerName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CustomerName));
            }
            if ((Original_Address == null)) {
                throw new System.ArgumentNullException("Original_Address");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                throw new System.ArgumentNullException("Original_City");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_City));
            }
            if ((Original_State == null)) {
                throw new System.ArgumentNullException("Original_State");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_State));
            }
            if ((Original_ZipCode == null)) {
                throw new System.ArgumentNullException("Original_ZipCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_ZipCode));
            }
            if ((Original_Email == null)) {
                throw new System.ArgumentNullException("Original_Email");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Email));
            }
            if ((Original_ContactNumber == null)) {
                throw new System.ArgumentNullException("Original_ContactNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_ContactNumber));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CustomerID, string CustomerName, string Address, string City, string State, string ZipCode, string Email, string ContactNumber) {
            if ((CustomerID == null)) {
                throw new System.ArgumentNullException("CustomerID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CustomerID));
            }
            if ((CustomerName == null)) {
                throw new System.ArgumentNullException("CustomerName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CustomerName));
            }
            if ((Address == null)) {
                throw new System.ArgumentNullException("Address");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Address));
            }
            if ((City == null)) {
                throw new System.ArgumentNullException("City");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(City));
            }
            if ((State == null)) {
                throw new System.ArgumentNullException("State");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(State));
            }
            if ((ZipCode == null)) {
                throw new System.ArgumentNullException("ZipCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ZipCode));
            }
            if ((Email == null)) {
                throw new System.ArgumentNullException("Email");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Email));
            }
            if ((ContactNumber == null)) {
                throw new System.ArgumentNullException("ContactNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ContactNumber));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CustomerID, 
                    string CustomerName, 
                    string Address, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string Email, 
                    string ContactNumber, 
                    string Original_CustomerID, 
                    string Original_CustomerName, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_State, 
                    string Original_ZipCode, 
                    string Original_Email, 
                    string Original_ContactNumber) {
            if ((CustomerID == null)) {
                throw new System.ArgumentNullException("CustomerID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CustomerID));
            }
            if ((CustomerName == null)) {
                throw new System.ArgumentNullException("CustomerName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CustomerName));
            }
            if ((Address == null)) {
                throw new System.ArgumentNullException("Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Address));
            }
            if ((City == null)) {
                throw new System.ArgumentNullException("City");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(City));
            }
            if ((State == null)) {
                throw new System.ArgumentNullException("State");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(State));
            }
            if ((ZipCode == null)) {
                throw new System.ArgumentNullException("ZipCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ZipCode));
            }
            if ((Email == null)) {
                throw new System.ArgumentNullException("Email");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Email));
            }
            if ((ContactNumber == null)) {
                throw new System.ArgumentNullException("ContactNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ContactNumber));
            }
            if ((Original_CustomerID == null)) {
                throw new System.ArgumentNullException("Original_CustomerID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_CustomerID));
            }
            if ((Original_CustomerName == null)) {
                throw new System.ArgumentNullException("Original_CustomerName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_CustomerName));
            }
            if ((Original_Address == null)) {
                throw new System.ArgumentNullException("Original_Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                throw new System.ArgumentNullException("Original_City");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_City));
            }
            if ((Original_State == null)) {
                throw new System.ArgumentNullException("Original_State");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_State));
            }
            if ((Original_ZipCode == null)) {
                throw new System.ArgumentNullException("Original_ZipCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_ZipCode));
            }
            if ((Original_Email == null)) {
                throw new System.ArgumentNullException("Original_Email");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Email));
            }
            if ((Original_ContactNumber == null)) {
                throw new System.ArgumentNullException("Original_ContactNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_ContactNumber));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DepartmentTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DepartmentTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Department";
            tableMapping.ColumnMappings.Add("DepartmentID", "DepartmentID");
            tableMapping.ColumnMappings.Add("DepartmentName", "DepartmentName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Department] WHERE (([DepartmentID] = @Original_DepartmentID) A" +
                "ND ([DepartmentName] = @Original_DepartmentName))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Department] ([DepartmentID], [DepartmentName]) VALUES (@Depart" +
                "mentID, @DepartmentName);\r\nSELECT DepartmentID, DepartmentName FROM Department W" +
                "HERE (DepartmentID = @DepartmentID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Department] SET [DepartmentID] = @DepartmentID, [DepartmentName] = @DepartmentName WHERE (([DepartmentID] = @Original_DepartmentID) AND ([DepartmentName] = @Original_DepartmentName));
SELECT DepartmentID, DepartmentName FROM Department WHERE (DepartmentID = @DepartmentID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DepartmentID, DepartmentName FROM dbo.Department";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.DepartmentDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.DepartmentDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.DepartmentDataTable dataTable = new DataSet.DepartmentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.DepartmentDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "Department");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_DepartmentID, string Original_DepartmentName) {
            if ((Original_DepartmentID == null)) {
                throw new System.ArgumentNullException("Original_DepartmentID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_DepartmentID));
            }
            if ((Original_DepartmentName == null)) {
                throw new System.ArgumentNullException("Original_DepartmentName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_DepartmentName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string DepartmentID, string DepartmentName) {
            if ((DepartmentID == null)) {
                throw new System.ArgumentNullException("DepartmentID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(DepartmentID));
            }
            if ((DepartmentName == null)) {
                throw new System.ArgumentNullException("DepartmentName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DepartmentName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string DepartmentID, string DepartmentName, string Original_DepartmentID, string Original_DepartmentName) {
            if ((DepartmentID == null)) {
                throw new System.ArgumentNullException("DepartmentID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(DepartmentID));
            }
            if ((DepartmentName == null)) {
                throw new System.ArgumentNullException("DepartmentName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DepartmentName));
            }
            if ((Original_DepartmentID == null)) {
                throw new System.ArgumentNullException("Original_DepartmentID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_DepartmentID));
            }
            if ((Original_DepartmentName == null)) {
                throw new System.ArgumentNullException("Original_DepartmentName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_DepartmentName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DriverTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DriverTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Driver";
            tableMapping.ColumnMappings.Add("DriverID", "DriverID");
            tableMapping.ColumnMappings.Add("DriverName", "DriverName");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("Age", "Age");
            tableMapping.ColumnMappings.Add("LicenseNumber", "LicenseNumber");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Driver] WHERE (([DriverID] = @Original_DriverID) AND ([DriverN" +
                "ame] = @Original_DriverName) AND ([Address] = @Original_Address) AND ([Age] = @O" +
                "riginal_Age) AND ([LicenseNumber] = @Original_LicenseNumber))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DriverID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DriverID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DriverName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DriverName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Age", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LicenseNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LicenseNumber", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Driver] ([DriverID], [DriverName], [Address], [Age], [LicenseN" +
                "umber]) VALUES (@DriverID, @DriverName, @Address, @Age, @LicenseNumber);\r\nSELECT" +
                " DriverID, DriverName, Address, Age, LicenseNumber FROM Driver WHERE (DriverID =" +
                " @DriverID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DriverID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DriverID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DriverName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DriverName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Age", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LicenseNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LicenseNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Driver] SET [DriverID] = @DriverID, [DriverName] = @DriverName, [Address] = @Address, [Age] = @Age, [LicenseNumber] = @LicenseNumber WHERE (([DriverID] = @Original_DriverID) AND ([DriverName] = @Original_DriverName) AND ([Address] = @Original_Address) AND ([Age] = @Original_Age) AND ([LicenseNumber] = @Original_LicenseNumber));
SELECT DriverID, DriverName, Address, Age, LicenseNumber FROM Driver WHERE (DriverID = @DriverID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DriverID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DriverID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DriverName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DriverName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Age", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LicenseNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LicenseNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DriverID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DriverID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DriverName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DriverName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Age", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LicenseNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LicenseNumber", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DriverID, DriverName, Address, Age, LicenseNumber FROM dbo.Driver";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.DriverDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.DriverDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.DriverDataTable dataTable = new DataSet.DriverDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.DriverDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "Driver");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_DriverID, string Original_DriverName, string Original_Address, int Original_Age, string Original_LicenseNumber) {
            if ((Original_DriverID == null)) {
                throw new System.ArgumentNullException("Original_DriverID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_DriverID));
            }
            if ((Original_DriverName == null)) {
                throw new System.ArgumentNullException("Original_DriverName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_DriverName));
            }
            if ((Original_Address == null)) {
                throw new System.ArgumentNullException("Original_Address");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Address));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Age));
            if ((Original_LicenseNumber == null)) {
                throw new System.ArgumentNullException("Original_LicenseNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_LicenseNumber));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string DriverID, string DriverName, string Address, int Age, string LicenseNumber) {
            if ((DriverID == null)) {
                throw new System.ArgumentNullException("DriverID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(DriverID));
            }
            if ((DriverName == null)) {
                throw new System.ArgumentNullException("DriverName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DriverName));
            }
            if ((Address == null)) {
                throw new System.ArgumentNullException("Address");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Address));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Age));
            if ((LicenseNumber == null)) {
                throw new System.ArgumentNullException("LicenseNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(LicenseNumber));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string DriverID, string DriverName, string Address, int Age, string LicenseNumber, string Original_DriverID, string Original_DriverName, string Original_Address, int Original_Age, string Original_LicenseNumber) {
            if ((DriverID == null)) {
                throw new System.ArgumentNullException("DriverID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(DriverID));
            }
            if ((DriverName == null)) {
                throw new System.ArgumentNullException("DriverName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DriverName));
            }
            if ((Address == null)) {
                throw new System.ArgumentNullException("Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Address));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Age));
            if ((LicenseNumber == null)) {
                throw new System.ArgumentNullException("LicenseNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(LicenseNumber));
            }
            if ((Original_DriverID == null)) {
                throw new System.ArgumentNullException("Original_DriverID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_DriverID));
            }
            if ((Original_DriverName == null)) {
                throw new System.ArgumentNullException("Original_DriverName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_DriverName));
            }
            if ((Original_Address == null)) {
                throw new System.ArgumentNullException("Original_Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Address));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Age));
            if ((Original_LicenseNumber == null)) {
                throw new System.ArgumentNullException("Original_LicenseNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_LicenseNumber));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmployeeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Employee";
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID");
            tableMapping.ColumnMappings.Add("EmployeeName", "EmployeeName");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("DateOfBirth", "DateOfBirth");
            tableMapping.ColumnMappings.Add("DateOfJoininng", "DateOfJoininng");
            tableMapping.ColumnMappings.Add("Designation", "Designation");
            tableMapping.ColumnMappings.Add("DepartmentID", "DepartmentID");
            tableMapping.ColumnMappings.Add("Password", "Password");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Employee] WHERE (([EmployeeID] = @Original_EmployeeID) AND ([EmployeeName] = @Original_EmployeeName) AND ([Address] = @Original_Address) AND ([DateOfBirth] = @Original_DateOfBirth) AND ([DateOfJoininng] = @Original_DateOfJoininng) AND ([Designation] = @Original_Designation) AND ([DepartmentID] = @Original_DepartmentID) AND ([Password] = @Original_Password))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmployeeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmployeeName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfBirth", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfBirth", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfJoininng", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfJoininng", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Designation", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Designation", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Employee] ([EmployeeID], [EmployeeName], [Address], [DateOfBirth], [DateOfJoininng], [Designation], [DepartmentID], [Password]) VALUES (@EmployeeID, @EmployeeName, @Address, @DateOfBirth, @DateOfJoininng, @Designation, @DepartmentID, @Password);
SELECT EmployeeID, EmployeeName, Address, DateOfBirth, DateOfJoininng, Designation, DepartmentID, Password FROM Employee WHERE (EmployeeID = @EmployeeID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfBirth", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfBirth", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfJoininng", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfJoininng", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Designation", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Designation", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Employee] SET [EmployeeID] = @EmployeeID, [EmployeeName] = @EmployeeName, [Address] = @Address, [DateOfBirth] = @DateOfBirth, [DateOfJoininng] = @DateOfJoininng, [Designation] = @Designation, [DepartmentID] = @DepartmentID, [Password] = @Password WHERE (([EmployeeID] = @Original_EmployeeID) AND ([EmployeeName] = @Original_EmployeeName) AND ([Address] = @Original_Address) AND ([DateOfBirth] = @Original_DateOfBirth) AND ([DateOfJoininng] = @Original_DateOfJoininng) AND ([Designation] = @Original_Designation) AND ([DepartmentID] = @Original_DepartmentID) AND ([Password] = @Original_Password));
SELECT EmployeeID, EmployeeName, Address, DateOfBirth, DateOfJoininng, Designation, DepartmentID, Password FROM Employee WHERE (EmployeeID = @EmployeeID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfBirth", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfBirth", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfJoininng", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfJoininng", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Designation", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Designation", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmployeeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmployeeName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfBirth", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfBirth", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfJoininng", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfJoininng", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Designation", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Designation", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EmployeeID, EmployeeName, Address, DateOfBirth, DateOfJoininng, Designatio" +
                "n, DepartmentID, Password FROM dbo.Employee";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT *\r\nFROM Employee\r\nWHERE EmployeeID <> \'E000\' AND Designation = \'Assignee\' " +
                "AND DepartmentID = @DepartmentID";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentID", System.Data.SqlDbType.Char, 3, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.EmployeeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.EmployeeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.EmployeeDataTable dataTable = new DataSet.EmployeeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillAssigneeByDepartment(DataSet.EmployeeDataTable dataTable, string DepartmentID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((DepartmentID == null)) {
                throw new System.ArgumentNullException("DepartmentID");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(DepartmentID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.EmployeeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "Employee");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_EmployeeID, string Original_EmployeeName, string Original_Address, System.DateTime Original_DateOfBirth, System.DateTime Original_DateOfJoininng, string Original_Designation, string Original_DepartmentID, string Original_Password) {
            if ((Original_EmployeeID == null)) {
                throw new System.ArgumentNullException("Original_EmployeeID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_EmployeeID));
            }
            if ((Original_EmployeeName == null)) {
                throw new System.ArgumentNullException("Original_EmployeeName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_EmployeeName));
            }
            if ((Original_Address == null)) {
                throw new System.ArgumentNullException("Original_Address");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Address));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_DateOfBirth));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_DateOfJoininng));
            if ((Original_Designation == null)) {
                throw new System.ArgumentNullException("Original_Designation");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Designation));
            }
            if ((Original_DepartmentID == null)) {
                throw new System.ArgumentNullException("Original_DepartmentID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_DepartmentID));
            }
            if ((Original_Password == null)) {
                throw new System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string EmployeeID, string EmployeeName, string Address, System.DateTime DateOfBirth, System.DateTime DateOfJoininng, string Designation, string DepartmentID, string Password) {
            if ((EmployeeID == null)) {
                throw new System.ArgumentNullException("EmployeeID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(EmployeeID));
            }
            if ((EmployeeName == null)) {
                throw new System.ArgumentNullException("EmployeeName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(EmployeeName));
            }
            if ((Address == null)) {
                throw new System.ArgumentNullException("Address");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Address));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateOfBirth));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(DateOfJoininng));
            if ((Designation == null)) {
                throw new System.ArgumentNullException("Designation");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Designation));
            }
            if ((DepartmentID == null)) {
                throw new System.ArgumentNullException("DepartmentID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(DepartmentID));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string EmployeeID, 
                    string EmployeeName, 
                    string Address, 
                    System.DateTime DateOfBirth, 
                    System.DateTime DateOfJoininng, 
                    string Designation, 
                    string DepartmentID, 
                    string Password, 
                    string Original_EmployeeID, 
                    string Original_EmployeeName, 
                    string Original_Address, 
                    System.DateTime Original_DateOfBirth, 
                    System.DateTime Original_DateOfJoininng, 
                    string Original_Designation, 
                    string Original_DepartmentID, 
                    string Original_Password) {
            if ((EmployeeID == null)) {
                throw new System.ArgumentNullException("EmployeeID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(EmployeeID));
            }
            if ((EmployeeName == null)) {
                throw new System.ArgumentNullException("EmployeeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(EmployeeName));
            }
            if ((Address == null)) {
                throw new System.ArgumentNullException("Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Address));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateOfBirth));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(DateOfJoininng));
            if ((Designation == null)) {
                throw new System.ArgumentNullException("Designation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Designation));
            }
            if ((DepartmentID == null)) {
                throw new System.ArgumentNullException("DepartmentID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(DepartmentID));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Password));
            }
            if ((Original_EmployeeID == null)) {
                throw new System.ArgumentNullException("Original_EmployeeID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_EmployeeID));
            }
            if ((Original_EmployeeName == null)) {
                throw new System.ArgumentNullException("Original_EmployeeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_EmployeeName));
            }
            if ((Original_Address == null)) {
                throw new System.ArgumentNullException("Original_Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Address));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_DateOfBirth));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_DateOfJoininng));
            if ((Original_Designation == null)) {
                throw new System.ArgumentNullException("Original_Designation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Designation));
            }
            if ((Original_DepartmentID == null)) {
                throw new System.ArgumentNullException("Original_DepartmentID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_DepartmentID));
            }
            if ((Original_Password == null)) {
                throw new System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FeedBackTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FeedBackTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FeedBack";
            tableMapping.ColumnMappings.Add("FeedBackID", "FeedBackID");
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID");
            tableMapping.ColumnMappings.Add("RepresentativeID", "RepresentativeID");
            tableMapping.ColumnMappings.Add("DateOfFeedBack", "DateOfFeedBack");
            tableMapping.ColumnMappings.Add("FeedBackSource", "FeedBackSource");
            tableMapping.ColumnMappings.Add("FeedBackType", "FeedBackType");
            tableMapping.ColumnMappings.Add("FeedBackCategory", "FeedBackCategory");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("DepartmentID", "DepartmentID");
            tableMapping.ColumnMappings.Add("IncidentDate", "IncidentDate");
            tableMapping.ColumnMappings.Add("IncidentPlace", "IncidentPlace");
            tableMapping.ColumnMappings.Add("BusStop", "BusStop");
            tableMapping.ColumnMappings.Add("VehicleNumber", "VehicleNumber");
            tableMapping.ColumnMappings.Add("AssignerID", "AssignerID");
            tableMapping.ColumnMappings.Add("AssigneeID", "AssigneeID");
            tableMapping.ColumnMappings.Add("DateOfCompletion", "DateOfCompletion");
            tableMapping.ColumnMappings.Add("DateOfClosure", "DateOfClosure");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("DateOfAssignment", "DateOfAssignment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [FeedBack] WHERE (([FeedBackID] = @Original_FeedBackID) AND ([CustomerID] = @Original_CustomerID) AND ([RepresentativeID] = @Original_RepresentativeID) AND ([DateOfFeedBack] = @Original_DateOfFeedBack) AND ([FeedBackSource] = @Original_FeedBackSource) AND ([FeedBackType] = @Original_FeedBackType) AND ([FeedBackCategory] = @Original_FeedBackCategory) AND ([DepartmentID] = @Original_DepartmentID) AND ([IncidentDate] = @Original_IncidentDate) AND ([IncidentPlace] = @Original_IncidentPlace) AND ([BusStop] = @Original_BusStop) AND ([VehicleNumber] = @Original_VehicleNumber) AND ([AssignerID] = @Original_AssignerID) AND ([AssigneeID] = @Original_AssigneeID) AND ([DateOfCompletion] = @Original_DateOfCompletion) AND ([DateOfClosure] = @Original_DateOfClosure) AND ([Status] = @Original_Status) AND ([DateOfAssignment] = @Original_DateOfAssignment))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FeedBackID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RepresentativeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "RepresentativeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfFeedBack", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfFeedBack", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FeedBackSource", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackSource", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FeedBackType", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FeedBackCategory", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackCategory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncidentDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "IncidentDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncidentPlace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IncidentPlace", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BusStop", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BusStop", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_VehicleNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "VehicleNumber", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AssignerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "AssignerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AssigneeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "AssigneeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfCompletion", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfCompletion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfClosure", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfClosure", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfAssignment", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfAssignment", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [FeedBack] ([FeedBackID], [CustomerID], [RepresentativeID], [DateOfFeedBack], [FeedBackSource], [FeedBackType], [FeedBackCategory], [Description], [DepartmentID], [IncidentDate], [IncidentPlace], [BusStop], [VehicleNumber], [AssignerID], [AssigneeID], [DateOfCompletion], [DateOfClosure], [Status], [DateOfAssignment]) VALUES (@FeedBackID, @CustomerID, @RepresentativeID, @DateOfFeedBack, @FeedBackSource, @FeedBackType, @FeedBackCategory, @Description, @DepartmentID, @IncidentDate, @IncidentPlace, @BusStop, @VehicleNumber, @AssignerID, @AssigneeID, @DateOfCompletion, @DateOfClosure, @Status, @DateOfAssignment);
SELECT FeedBackID, CustomerID, RepresentativeID, DateOfFeedBack, FeedBackSource, FeedBackType, FeedBackCategory, Description, DepartmentID, IncidentDate, IncidentPlace, BusStop, VehicleNumber, AssignerID, AssigneeID, DateOfCompletion, DateOfClosure, Status, DateOfAssignment FROM FeedBack WHERE (FeedBackID = @FeedBackID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RepresentativeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "RepresentativeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfFeedBack", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfFeedBack", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackSource", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackSource", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackType", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackCategory", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackCategory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncidentDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "IncidentDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncidentPlace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IncidentPlace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BusStop", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BusStop", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VehicleNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "VehicleNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AssignerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "AssignerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AssigneeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "AssigneeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfCompletion", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfCompletion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfClosure", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfClosure", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfAssignment", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfAssignment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [FeedBack] SET [FeedBackID] = @FeedBackID, [CustomerID] = @CustomerID, [Re" +
                "presentativeID] = @RepresentativeID, [DateOfFeedBack] = @DateOfFeedBack, [FeedBa" +
                "ckSource] = @FeedBackSource, [FeedBackType] = @FeedBackType, [FeedBackCategory] " +
                "= @FeedBackCategory, [Description] = @Description, [DepartmentID] = @DepartmentI" +
                "D, [IncidentDate] = @IncidentDate, [IncidentPlace] = @IncidentPlace, [BusStop] =" +
                " @BusStop, [VehicleNumber] = @VehicleNumber, [AssignerID] = @AssignerID, [Assign" +
                "eeID] = @AssigneeID, [DateOfCompletion] = @DateOfCompletion, [DateOfClosure] = @" +
                "DateOfClosure, [Status] = @Status, [DateOfAssignment] = @DateOfAssignment WHERE " +
                "(([FeedBackID] = @Original_FeedBackID) AND ([CustomerID] = @Original_CustomerID)" +
                " AND ([RepresentativeID] = @Original_RepresentativeID) AND ([DateOfFeedBack] = @" +
                "Original_DateOfFeedBack) AND ([FeedBackSource] = @Original_FeedBackSource) AND (" +
                "[FeedBackType] = @Original_FeedBackType) AND ([FeedBackCategory] = @Original_Fee" +
                "dBackCategory) AND ([DepartmentID] = @Original_DepartmentID) AND ([IncidentDate]" +
                " = @Original_IncidentDate) AND ([IncidentPlace] = @Original_IncidentPlace) AND (" +
                "[BusStop] = @Original_BusStop) AND ([VehicleNumber] = @Original_VehicleNumber) A" +
                "ND ([AssignerID] = @Original_AssignerID) AND ([AssigneeID] = @Original_AssigneeI" +
                "D) AND ([DateOfCompletion] = @Original_DateOfCompletion) AND ([DateOfClosure] = " +
                "@Original_DateOfClosure) AND ([Status] = @Original_Status) AND ([DateOfAssignmen" +
                "t] = @Original_DateOfAssignment));\r\nSELECT FeedBackID, CustomerID, Representativ" +
                "eID, DateOfFeedBack, FeedBackSource, FeedBackType, FeedBackCategory, Description" +
                ", DepartmentID, IncidentDate, IncidentPlace, BusStop, VehicleNumber, AssignerID," +
                " AssigneeID, DateOfCompletion, DateOfClosure, Status, DateOfAssignment FROM Feed" +
                "Back WHERE (FeedBackID = @FeedBackID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CustomerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RepresentativeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "RepresentativeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfFeedBack", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfFeedBack", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackSource", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackSource", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackType", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackCategory", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackCategory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncidentDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "IncidentDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncidentPlace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IncidentPlace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BusStop", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BusStop", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VehicleNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "VehicleNumber", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AssignerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "AssignerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AssigneeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "AssigneeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfCompletion", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfCompletion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfClosure", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfClosure", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfAssignment", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfAssignment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FeedBackID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CustomerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CustomerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RepresentativeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "RepresentativeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfFeedBack", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfFeedBack", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FeedBackSource", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackSource", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FeedBackType", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FeedBackCategory", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackCategory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncidentDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "IncidentDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncidentPlace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IncidentPlace", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BusStop", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BusStop", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_VehicleNumber", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "VehicleNumber", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AssignerID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "AssignerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AssigneeID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "AssigneeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfCompletion", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfCompletion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfClosure", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfClosure", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfAssignment", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOfAssignment", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT FeedBackID, CustomerID, RepresentativeID, DateOfFeedBack, FeedBackSource, FeedBackType, FeedBackCategory, Description, DepartmentID, IncidentDate, IncidentPlace, BusStop, VehicleNumber, AssignerID, AssigneeID, DateOfCompletion, DateOfClosure, Status, DateOfAssignment FROM FeedBack";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE FeedBack SET\r\nAssignerID = @AssignerID,\r\nAssigneeID = @AssigneeID\r\nStatus " +
                "= @Status\r\nWHERE FeedBackID = @FeedBackID";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "UPDATE FeedBack SET\r\nStatus = @Status,\r\nDateOfClosure = @DateOfClosure\r\nWHERE Fee" +
                "dBackID = @FeedBackID";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfClosure", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "DateOfClosure", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 5, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "UPDATE FeedBack SET\r\nStatus = @Status,\r\nDateOfCompletion = @DateOfCompletion\r\nWHE" +
                "RE FeedBackID = @FeedBackID";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfCompletion", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "DateOfCompletion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 5, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"SELECT TOP 1 FeedBackID, CustomerID, RepresentativeID, DateOfFeedBack, FeedBackSource, FeedBackType, FeedBackCategory, Description, DepartmentID, IncidentDate, IncidentPlace, BusStop, VehicleNumber, AssignerID, AssigneeID, DateOfAssignment, DateOfCompletion, DateOfClosure, Status FROM FeedBack ORDER BY FeedBackID DESC";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.FeedBackDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.FeedBackDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.FeedBackDataTable dataTable = new DataSet.FeedBackDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySortedID(DataSet.FeedBackDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.FeedBackDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "FeedBack");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_FeedBackID, 
                    string Original_CustomerID, 
                    string Original_RepresentativeID, 
                    System.DateTime Original_DateOfFeedBack, 
                    string Original_FeedBackSource, 
                    string Original_FeedBackType, 
                    string Original_FeedBackCategory, 
                    string Original_DepartmentID, 
                    System.DateTime Original_IncidentDate, 
                    string Original_IncidentPlace, 
                    string Original_BusStop, 
                    string Original_VehicleNumber, 
                    string Original_AssignerID, 
                    string Original_AssigneeID, 
                    System.DateTime Original_DateOfCompletion, 
                    System.DateTime Original_DateOfClosure, 
                    string Original_Status, 
                    System.DateTime Original_DateOfAssignment) {
            if ((Original_FeedBackID == null)) {
                throw new System.ArgumentNullException("Original_FeedBackID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_FeedBackID));
            }
            if ((Original_CustomerID == null)) {
                throw new System.ArgumentNullException("Original_CustomerID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CustomerID));
            }
            if ((Original_RepresentativeID == null)) {
                throw new System.ArgumentNullException("Original_RepresentativeID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_RepresentativeID));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_DateOfFeedBack));
            if ((Original_FeedBackSource == null)) {
                throw new System.ArgumentNullException("Original_FeedBackSource");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FeedBackSource));
            }
            if ((Original_FeedBackType == null)) {
                throw new System.ArgumentNullException("Original_FeedBackType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_FeedBackType));
            }
            if ((Original_FeedBackCategory == null)) {
                throw new System.ArgumentNullException("Original_FeedBackCategory");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_FeedBackCategory));
            }
            if ((Original_DepartmentID == null)) {
                throw new System.ArgumentNullException("Original_DepartmentID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_DepartmentID));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_IncidentDate));
            if ((Original_IncidentPlace == null)) {
                throw new System.ArgumentNullException("Original_IncidentPlace");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_IncidentPlace));
            }
            if ((Original_BusStop == null)) {
                throw new System.ArgumentNullException("Original_BusStop");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_BusStop));
            }
            if ((Original_VehicleNumber == null)) {
                throw new System.ArgumentNullException("Original_VehicleNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_VehicleNumber));
            }
            if ((Original_AssignerID == null)) {
                throw new System.ArgumentNullException("Original_AssignerID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_AssignerID));
            }
            if ((Original_AssigneeID == null)) {
                throw new System.ArgumentNullException("Original_AssigneeID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_AssigneeID));
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((System.DateTime)(Original_DateOfCompletion));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((System.DateTime)(Original_DateOfClosure));
            if ((Original_Status == null)) {
                throw new System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Status));
            }
            this.Adapter.DeleteCommand.Parameters[17].Value = ((System.DateTime)(Original_DateOfAssignment));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string FeedBackID, 
                    string CustomerID, 
                    string RepresentativeID, 
                    System.DateTime DateOfFeedBack, 
                    string FeedBackSource, 
                    string FeedBackType, 
                    string FeedBackCategory, 
                    string Description, 
                    string DepartmentID, 
                    System.DateTime IncidentDate, 
                    string IncidentPlace, 
                    string BusStop, 
                    string VehicleNumber, 
                    string AssignerID, 
                    string AssigneeID, 
                    System.DateTime DateOfCompletion, 
                    System.DateTime DateOfClosure, 
                    string Status, 
                    System.DateTime DateOfAssignment) {
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(FeedBackID));
            }
            if ((CustomerID == null)) {
                throw new System.ArgumentNullException("CustomerID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CustomerID));
            }
            if ((RepresentativeID == null)) {
                throw new System.ArgumentNullException("RepresentativeID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(RepresentativeID));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateOfFeedBack));
            if ((FeedBackSource == null)) {
                throw new System.ArgumentNullException("FeedBackSource");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(FeedBackSource));
            }
            if ((FeedBackType == null)) {
                throw new System.ArgumentNullException("FeedBackType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(FeedBackType));
            }
            if ((FeedBackCategory == null)) {
                throw new System.ArgumentNullException("FeedBackCategory");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(FeedBackCategory));
            }
            if ((Description == null)) {
                throw new System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Description));
            }
            if ((DepartmentID == null)) {
                throw new System.ArgumentNullException("DepartmentID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(DepartmentID));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(IncidentDate));
            if ((IncidentPlace == null)) {
                throw new System.ArgumentNullException("IncidentPlace");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(IncidentPlace));
            }
            if ((BusStop == null)) {
                throw new System.ArgumentNullException("BusStop");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(BusStop));
            }
            if ((VehicleNumber == null)) {
                throw new System.ArgumentNullException("VehicleNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(VehicleNumber));
            }
            if ((AssignerID == null)) {
                throw new System.ArgumentNullException("AssignerID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(AssignerID));
            }
            if ((AssigneeID == null)) {
                throw new System.ArgumentNullException("AssigneeID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(AssigneeID));
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(DateOfCompletion));
            this.Adapter.InsertCommand.Parameters[16].Value = ((System.DateTime)(DateOfClosure));
            if ((Status == null)) {
                throw new System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Status));
            }
            this.Adapter.InsertCommand.Parameters[18].Value = ((System.DateTime)(DateOfAssignment));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string FeedBackID, 
                    string CustomerID, 
                    string RepresentativeID, 
                    System.DateTime DateOfFeedBack, 
                    string FeedBackSource, 
                    string FeedBackType, 
                    string FeedBackCategory, 
                    string Description, 
                    string DepartmentID, 
                    System.DateTime IncidentDate, 
                    string IncidentPlace, 
                    string BusStop, 
                    string VehicleNumber, 
                    string AssignerID, 
                    string AssigneeID, 
                    System.DateTime DateOfCompletion, 
                    System.DateTime DateOfClosure, 
                    string Status, 
                    System.DateTime DateOfAssignment, 
                    string Original_FeedBackID, 
                    string Original_CustomerID, 
                    string Original_RepresentativeID, 
                    System.DateTime Original_DateOfFeedBack, 
                    string Original_FeedBackSource, 
                    string Original_FeedBackType, 
                    string Original_FeedBackCategory, 
                    string Original_DepartmentID, 
                    System.DateTime Original_IncidentDate, 
                    string Original_IncidentPlace, 
                    string Original_BusStop, 
                    string Original_VehicleNumber, 
                    string Original_AssignerID, 
                    string Original_AssigneeID, 
                    System.DateTime Original_DateOfCompletion, 
                    System.DateTime Original_DateOfClosure, 
                    string Original_Status, 
                    System.DateTime Original_DateOfAssignment) {
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(FeedBackID));
            }
            if ((CustomerID == null)) {
                throw new System.ArgumentNullException("CustomerID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CustomerID));
            }
            if ((RepresentativeID == null)) {
                throw new System.ArgumentNullException("RepresentativeID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(RepresentativeID));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateOfFeedBack));
            if ((FeedBackSource == null)) {
                throw new System.ArgumentNullException("FeedBackSource");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(FeedBackSource));
            }
            if ((FeedBackType == null)) {
                throw new System.ArgumentNullException("FeedBackType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(FeedBackType));
            }
            if ((FeedBackCategory == null)) {
                throw new System.ArgumentNullException("FeedBackCategory");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(FeedBackCategory));
            }
            if ((Description == null)) {
                throw new System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Description));
            }
            if ((DepartmentID == null)) {
                throw new System.ArgumentNullException("DepartmentID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(DepartmentID));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(IncidentDate));
            if ((IncidentPlace == null)) {
                throw new System.ArgumentNullException("IncidentPlace");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(IncidentPlace));
            }
            if ((BusStop == null)) {
                throw new System.ArgumentNullException("BusStop");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(BusStop));
            }
            if ((VehicleNumber == null)) {
                throw new System.ArgumentNullException("VehicleNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(VehicleNumber));
            }
            if ((AssignerID == null)) {
                throw new System.ArgumentNullException("AssignerID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(AssignerID));
            }
            if ((AssigneeID == null)) {
                throw new System.ArgumentNullException("AssigneeID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(AssigneeID));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(DateOfCompletion));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(DateOfClosure));
            if ((Status == null)) {
                throw new System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Status));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(DateOfAssignment));
            if ((Original_FeedBackID == null)) {
                throw new System.ArgumentNullException("Original_FeedBackID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_FeedBackID));
            }
            if ((Original_CustomerID == null)) {
                throw new System.ArgumentNullException("Original_CustomerID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_CustomerID));
            }
            if ((Original_RepresentativeID == null)) {
                throw new System.ArgumentNullException("Original_RepresentativeID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_RepresentativeID));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_DateOfFeedBack));
            if ((Original_FeedBackSource == null)) {
                throw new System.ArgumentNullException("Original_FeedBackSource");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_FeedBackSource));
            }
            if ((Original_FeedBackType == null)) {
                throw new System.ArgumentNullException("Original_FeedBackType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_FeedBackType));
            }
            if ((Original_FeedBackCategory == null)) {
                throw new System.ArgumentNullException("Original_FeedBackCategory");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_FeedBackCategory));
            }
            if ((Original_DepartmentID == null)) {
                throw new System.ArgumentNullException("Original_DepartmentID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_DepartmentID));
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((System.DateTime)(Original_IncidentDate));
            if ((Original_IncidentPlace == null)) {
                throw new System.ArgumentNullException("Original_IncidentPlace");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_IncidentPlace));
            }
            if ((Original_BusStop == null)) {
                throw new System.ArgumentNullException("Original_BusStop");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_BusStop));
            }
            if ((Original_VehicleNumber == null)) {
                throw new System.ArgumentNullException("Original_VehicleNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_VehicleNumber));
            }
            if ((Original_AssignerID == null)) {
                throw new System.ArgumentNullException("Original_AssignerID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_AssignerID));
            }
            if ((Original_AssigneeID == null)) {
                throw new System.ArgumentNullException("Original_AssigneeID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_AssigneeID));
            }
            this.Adapter.UpdateCommand.Parameters[33].Value = ((System.DateTime)(Original_DateOfCompletion));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((System.DateTime)(Original_DateOfClosure));
            if ((Original_Status == null)) {
                throw new System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_Status));
            }
            this.Adapter.UpdateCommand.Parameters[36].Value = ((System.DateTime)(Original_DateOfAssignment));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int AssignComplaint() {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int CloseFeedBack(string Status, System.DateTime DateOfClosure, string FeedBackID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((Status == null)) {
                throw new System.ArgumentNullException("Status");
            }
            else {
                command.Parameters[0].Value = ((string)(Status));
            }
            command.Parameters[1].Value = ((System.DateTime)(DateOfClosure));
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                command.Parameters[2].Value = ((string)(FeedBackID));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int CompleteInvestigation(string Status, System.DateTime DateOfCompletion, string FeedBackID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((Status == null)) {
                throw new System.ArgumentNullException("Status");
            }
            else {
                command.Parameters[0].Value = ((string)(Status));
            }
            command.Parameters[1].Value = ((System.DateTime)(DateOfCompletion));
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                command.Parameters[2].Value = ((string)(FeedBackID));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InvestigationDetailsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvestigationDetailsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InvestigationDetails";
            tableMapping.ColumnMappings.Add("FeedBackID", "FeedBackID");
            tableMapping.ColumnMappings.Add("Validity", "Validity");
            tableMapping.ColumnMappings.Add("Reason", "Reason");
            tableMapping.ColumnMappings.Add("DriverID", "DriverID");
            tableMapping.ColumnMappings.Add("Details", "Details");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [InvestigationDetails] ([FeedBackID], [Validity], [Reason], [DriverID" +
                "], [Details]) VALUES (@FeedBackID, @Validity, @Reason, @DriverID, @Details)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Validity", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Validity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Reason", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "Reason", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DriverID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "DriverID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Details", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "Details", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FeedBackID, Validity, Reason, DriverID, Details FROM InvestigationDetails";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.InvestigationDetailsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.InvestigationDetailsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.InvestigationDetailsDataTable dataTable = new DataSet.InvestigationDetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.InvestigationDetailsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "InvestigationDetails");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string FeedBackID, string Validity, string Reason, string DriverID, string Details) {
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(FeedBackID));
            }
            if ((Validity == null)) {
                throw new System.ArgumentNullException("Validity");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Validity));
            }
            if ((Reason == null)) {
                throw new System.ArgumentNullException("Reason");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Reason));
            }
            if ((DriverID == null)) {
                throw new System.ArgumentNullException("DriverID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DriverID));
            }
            if ((Details == null)) {
                throw new System.ArgumentNullException("Details");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Details));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CurrentEmployeeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CurrentEmployeeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CurrentEmployee";
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID");
            tableMapping.ColumnMappings.Add("EmployeeName", "EmployeeName");
            tableMapping.ColumnMappings.Add("Designation", "Designation");
            tableMapping.ColumnMappings.Add("DepartmentID", "DepartmentID");
            tableMapping.ColumnMappings.Add("DepartmentName", "DepartmentName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EmployeeID, EmployeeName, Designation, Employee.DepartmentID, DepartmentNa" +
                "me\r\nFROM Employee\r\nJOIN Department ON Employee.DepartmentID = Department.Departm" +
                "entID\r\nWHERE EmployeeID <> \'E000\' AND EmployeeID = @EmployeeID AND Password = @P" +
                "assword";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeID", System.Data.SqlDbType.Char, 4, System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.CurrentEmployeeDataTable dataTable, string EmployeeID, string Password) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((EmployeeID == null)) {
                throw new System.ArgumentNullException("EmployeeID");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(EmployeeID));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Password));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FeedBackDataTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FeedBackDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FeedBackData";
            tableMapping.ColumnMappings.Add("FeedBackID", "FeedBackID");
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName");
            tableMapping.ColumnMappings.Add("RepresentativeName", "RepresentativeName");
            tableMapping.ColumnMappings.Add("DateOfFeedBack", "DateOfFeedBack");
            tableMapping.ColumnMappings.Add("FeedBackSource", "FeedBackSource");
            tableMapping.ColumnMappings.Add("FeedBackType", "FeedBackType");
            tableMapping.ColumnMappings.Add("FeedBackCategory", "FeedBackCategory");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("DepartmentName", "DepartmentName");
            tableMapping.ColumnMappings.Add("IncidentDate", "IncidentDate");
            tableMapping.ColumnMappings.Add("IncidentPlace", "IncidentPlace");
            tableMapping.ColumnMappings.Add("BusStop", "BusStop");
            tableMapping.ColumnMappings.Add("VehicleNumber", "VehicleNumber");
            tableMapping.ColumnMappings.Add("AssignerName", "AssignerName");
            tableMapping.ColumnMappings.Add("AssigneeName", "AssigneeName");
            tableMapping.ColumnMappings.Add("Status", "Status");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT FeedBackID, CustomerName, em1.EmployeeName RepresentativeName, DateOfFeedBack, FeedBackSource, FeedBackType, FeedBackCategory, Description, DepartmentName,  IncidentDate, IncidentPlace, BusStop, VehicleNumber, em2.EmployeeName AssignerName, em3.EmployeeName AssigneeName, Status
FROM FeedBack fb
JOIN Customer cust ON cust.CustomerID = fb.CustomerID
JOIN Employee em1 ON em1.EmployeeID = fb.RepresentativeID
JOIN Department dept ON dept.DepartmentID = fb.DepartmentID
JOIN Employee em2 ON em2.EmployeeID = fb.AssignerID
JOIN Employee em3 ON em3.EmployeeID = fb.AssigneeID";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT FeedBackID, CustomerName, em1.EmployeeName RepresentativeName, DateOfFeedBack, FeedBackSource, FeedBackType, FeedBackCategory, Description, DepartmentName,  IncidentDate, IncidentPlace, BusStop, VehicleNumber, em2.EmployeeName AssignerName, em3.EmployeeName AssigneeName, Status
FROM FeedBack fb
JOIN Customer cust ON cust.CustomerID = fb.CustomerID
JOIN Employee em1 ON em1.EmployeeID = fb.RepresentativeID
JOIN Department dept ON dept.DepartmentID = fb.DepartmentID
JOIN Employee em2 ON em2.EmployeeID = fb.AssignerID
JOIN Employee em3 ON em3.EmployeeID = fb.AssigneeID
WHERE FeedBackID = @FeedBackID";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 5, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.FeedBackDataDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(DataSet.FeedBackDataDataTable dataTable, string FeedBackID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(FeedBackID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ComplaintTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ComplaintTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Complaint";
            tableMapping.ColumnMappings.Add("FeedBackID", "FeedBackID");
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName");
            tableMapping.ColumnMappings.Add("RepresentativeName", "RepresentativeName");
            tableMapping.ColumnMappings.Add("DateOfFeedBack", "DateOfFeedBack");
            tableMapping.ColumnMappings.Add("FeedBackSource", "FeedBackSource");
            tableMapping.ColumnMappings.Add("FeedBackType", "FeedBackType");
            tableMapping.ColumnMappings.Add("FeedBackCategory", "FeedBackCategory");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("DepartmentName", "DepartmentName");
            tableMapping.ColumnMappings.Add("IncidentDate", "IncidentDate");
            tableMapping.ColumnMappings.Add("IncidentPlace", "IncidentPlace");
            tableMapping.ColumnMappings.Add("BusStop", "BusStop");
            tableMapping.ColumnMappings.Add("VehicleNumber", "VehicleNumber");
            tableMapping.ColumnMappings.Add("AssignerName", "AssignerName");
            tableMapping.ColumnMappings.Add("AssigneeName", "AssigneeName");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("AssigneeID", "AssigneeID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT FeedBackID, CustomerName, em1.EmployeeName RepresentativeName, DateOfFeedBack, FeedBackSource, FeedBackType, FeedBackCategory, Description, DepartmentName,  IncidentDate, IncidentPlace, BusStop, VehicleNumber, em2.EmployeeName AssignerName, em3.EmployeeName AssigneeName, AssigneeID, Status
FROM FeedBack fb
JOIN Customer cust ON cust.CustomerID = fb.CustomerID
JOIN Employee em1 ON em1.EmployeeID = fb.RepresentativeID
JOIN Department dept ON dept.DepartmentID = fb.DepartmentID
JOIN Employee em2 ON em2.EmployeeID = fb.AssignerID
JOIN Employee em3 ON em3.EmployeeID = fb.AssigneeID
WHERE FeedBackType = 'Complaint'";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE FeedBack SET\r\nAssignerID = @AssignerID,\r\nAssigneeID = @AssigneeID,\r\nStatus" +
                " = @Status,\r\nDateOfAssignment = @DateOfAssignment\r\nWHERE FeedBackID = @FeedBackI" +
                "D";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AssignerID", System.Data.SqlDbType.Char, 4, System.Data.ParameterDirection.Input, 0, 0, "AssignerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AssigneeID", System.Data.SqlDbType.Char, 4, System.Data.ParameterDirection.Input, 0, 0, "AssigneeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfAssignment", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "DateOfAssignment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 5, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT FeedBackID, CustomerName, em1.EmployeeName RepresentativeName, DateOfFeedBack, FeedBackSource, FeedBackType, FeedBackCategory, Description, DepartmentName,  IncidentDate, IncidentPlace, BusStop, VehicleNumber, em2.EmployeeName AssignerName, em3.EmployeeName AssigneeName, AssigneeID, Status
FROM FeedBack fb
JOIN Customer cust ON cust.CustomerID = fb.CustomerID
JOIN Employee em1 ON em1.EmployeeID = fb.RepresentativeID
JOIN Department dept ON dept.DepartmentID = fb.DepartmentID
JOIN Employee em2 ON em2.EmployeeID = fb.AssignerID
JOIN Employee em3 ON em3.EmployeeID = fb.AssigneeID
WHERE FeedBackType = 'Complaint' AND
(Status = 'Investigation Complete' OR Status = 'Closed')";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT FeedBackID, CustomerName, em1.EmployeeName RepresentativeName, DateOfFeedBack, FeedBackSource, FeedBackType, FeedBackCategory, Description, DepartmentName,  IncidentDate, IncidentPlace, BusStop, VehicleNumber, em2.EmployeeName AssignerName, em3.EmployeeName AssigneeName, AssigneeID, Status
FROM FeedBack fb
JOIN Customer cust ON cust.CustomerID = fb.CustomerID
JOIN Employee em1 ON em1.EmployeeID = fb.RepresentativeID
JOIN Department dept ON dept.DepartmentID = fb.DepartmentID
JOIN Employee em2 ON em2.EmployeeID = fb.AssignerID
JOIN Employee em3 ON em3.EmployeeID = fb.AssigneeID
WHERE FeedBackType = 'Complaint'
AND fb.DepartmentID = @DepartmentID";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentID", System.Data.SqlDbType.Char, 3, System.Data.ParameterDirection.Input, 0, 0, "DepartmentID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"SELECT FeedBackID, CustomerName, em1.EmployeeName RepresentativeName, DateOfFeedBack, FeedBackSource, FeedBackType, FeedBackCategory, Description, DepartmentName,  IncidentDate, IncidentPlace, BusStop, VehicleNumber, em2.EmployeeName AssignerName, em3.EmployeeName AssigneeName, AssigneeID, Status
FROM FeedBack fb
JOIN Customer cust ON cust.CustomerID = fb.CustomerID
JOIN Employee em1 ON em1.EmployeeID = fb.RepresentativeID
JOIN Department dept ON dept.DepartmentID = fb.DepartmentID
JOIN Employee em2 ON em2.EmployeeID = fb.AssignerID
JOIN Employee em3 ON em3.EmployeeID = fb.AssigneeID
WHERE FeedBackType = 'Complaint' AND Status <> 'Closed'";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.ComplaintDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCompletedComplaints(DataSet.ComplaintDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDepartment(DataSet.ComplaintDataTable dataTable, string DepartmentID) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((DepartmentID == null)) {
                throw new System.ArgumentNullException("DepartmentID");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(DepartmentID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPendingComplaints(DataSet.ComplaintDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Assign(string AssignerID, string AssigneeID, string Status, System.DateTime DateOfAssignment, string FeedBackID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((AssignerID == null)) {
                throw new System.ArgumentNullException("AssignerID");
            }
            else {
                command.Parameters[0].Value = ((string)(AssignerID));
            }
            if ((AssigneeID == null)) {
                throw new System.ArgumentNullException("AssigneeID");
            }
            else {
                command.Parameters[1].Value = ((string)(AssigneeID));
            }
            if ((Status == null)) {
                throw new System.ArgumentNullException("Status");
            }
            else {
                command.Parameters[2].Value = ((string)(Status));
            }
            command.Parameters[3].Value = ((System.DateTime)(DateOfAssignment));
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                command.Parameters[4].Value = ((string)(FeedBackID));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InvestigationDetailsDataTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvestigationDetailsDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InvestigationDetailsData";
            tableMapping.ColumnMappings.Add("FeedBackID", "FeedBackID");
            tableMapping.ColumnMappings.Add("Validity", "Validity");
            tableMapping.ColumnMappings.Add("Reason", "Reason");
            tableMapping.ColumnMappings.Add("DriverName", "DriverName");
            tableMapping.ColumnMappings.Add("DateOfCompletion", "DateOfCompletion");
            tableMapping.ColumnMappings.Add("FeedBackCategory", "FeedBackCategory");
            tableMapping.ColumnMappings.Add("DateOfFeedBack", "DateOfFeedBack");
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName");
            tableMapping.ColumnMappings.Add("DateOfAssignment", "DateOfAssignment");
            tableMapping.ColumnMappings.Add("Details", "Details");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT fb.FeedBackID, FeedBackCategory, DateOfFeedBack, CustomerName, DateOfAssignment, DateOfCompletion, Validity, Reason, DriverName, Details
FROM InvestigationDetails de
JOIN FeedBack fb ON fb.FeedBackID = de.FeedBackID
JOIN Driver ON Driver.DriverID = de.DriverID
JOIN Customer ON Customer.CustomerID = fb.CustomerID
WHERE de.FeedBackID = @FeedBackID";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 5, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE InvestigationDetails SET\r\nValidity = @Validity,\r\nReason = @Reason,\r\nDriver" +
                "ID = @DriverID,\r\nDetails = @Details\r\nWHERE FeedBackID = @FeedBackID";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Validity", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Validity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Reason", System.Data.SqlDbType.NText, 1073741823, System.Data.ParameterDirection.Input, 0, 0, "Reason", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DriverID", System.Data.SqlDbType.Char, 3, System.Data.ParameterDirection.Input, 0, 0, "DriverID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Details", System.Data.SqlDbType.NText, 1073741823, System.Data.ParameterDirection.Input, 0, 0, "Details", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 5, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.InvestigationDetailsDataDataTable dataTable, string FeedBackID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(FeedBackID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Create(string Validity, string Reason, string DriverID, string Details, string FeedBackID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Validity == null)) {
                throw new System.ArgumentNullException("Validity");
            }
            else {
                command.Parameters[0].Value = ((string)(Validity));
            }
            if ((Reason == null)) {
                throw new System.ArgumentNullException("Reason");
            }
            else {
                command.Parameters[1].Value = ((string)(Reason));
            }
            if ((DriverID == null)) {
                throw new System.ArgumentNullException("DriverID");
            }
            else {
                command.Parameters[2].Value = ((string)(DriverID));
            }
            if ((Details == null)) {
                throw new System.ArgumentNullException("Details");
            }
            else {
                command.Parameters[3].Value = ((string)(Details));
            }
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                command.Parameters[4].Value = ((string)(FeedBackID));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CorrectiveActionsDataTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CorrectiveActionsDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CorrectiveActionsData";
            tableMapping.ColumnMappings.Add("FeedBackID", "FeedBackID");
            tableMapping.ColumnMappings.Add("ActionDetails", "ActionDetails");
            tableMapping.ColumnMappings.Add("RepresentativeName", "RepresentativeName");
            tableMapping.ColumnMappings.Add("DateOfClosure", "DateOfClosure");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT FeedBack.FeedBackID, ActionDetails, EmployeeName RepresentativeName, DateOfClosure
FROM CorrectiveActions
JOIN FeedBack ON FeedBack.FeedBackID = CorrectiveActions.FeedBackID
JOIN Employee ON Employee.EmployeeID = CorrectiveActions.RepresentativeID
WHERE FeedBack.FeedBackID = @FeedBackID";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 5, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE CorrectiveActions SET\r\nActionDetails = @ActionDetails,\r\nRepresentativeID =" +
                " @RepresentativeID\r\nWHERE FeedBackID = @FeedBackID";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ActionDetails", System.Data.SqlDbType.NText, 1073741823, System.Data.ParameterDirection.Input, 0, 0, "ActionDetails", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RepresentativeID", System.Data.SqlDbType.Char, 4, System.Data.ParameterDirection.Input, 0, 0, "RepresentativeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeedBackID", System.Data.SqlDbType.Char, 5, System.Data.ParameterDirection.Input, 0, 0, "FeedBackID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.CorrectiveActionsDataDataTable dataTable, string FeedBackID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(FeedBackID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Create(string ActionDetails, string RepresentativeID, string FeedBackID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((ActionDetails == null)) {
                throw new System.ArgumentNullException("ActionDetails");
            }
            else {
                command.Parameters[0].Value = ((string)(ActionDetails));
            }
            if ((RepresentativeID == null)) {
                throw new System.ArgumentNullException("RepresentativeID");
            }
            else {
                command.Parameters[1].Value = ((string)(RepresentativeID));
            }
            if ((FeedBackID == null)) {
                throw new System.ArgumentNullException("FeedBackID");
            }
            else {
                command.Parameters[2].Value = ((string)(FeedBackID));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ServicesDetailsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ServicesDetailsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ServicesDetails";
            tableMapping.ColumnMappings.Add("StartingPoint", "StartingPoint");
            tableMapping.ColumnMappings.Add("Destination", "Destination");
            tableMapping.ColumnMappings.Add("Agency", "Agency");
            tableMapping.ColumnMappings.Add("ContactPerson", "ContactPerson");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("PhoneNo", "PhoneNo");
            tableMapping.ColumnMappings.Add("Services", "Services");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ServicesDetails] ([StartingPoint], [Destination], [Agency], [C" +
                "ontactPerson], [Email], [PhoneNo], [Services]) VALUES (@StartingPoint, @Destinat" +
                "ion, @Agency, @ContactPerson, @Email, @PhoneNo, @Services)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartingPoint", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "StartingPoint", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Destination", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Destination", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Agency", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Agency", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactPerson", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContactPerson", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PhoneNo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PhoneNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Services", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "Services", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TraveLineTransitServices.Properties.Settings.Default.TraveLineTransitServicesConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT StartingPoint, Destination, Agency, ContactPerson, Email, PhoneNo, Service" +
                "s FROM dbo.ServicesDetails";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.ServicesDetailsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.ServicesDetailsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.ServicesDetailsDataTable dataTable = new DataSet.ServicesDetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.ServicesDetailsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "ServicesDetails");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string StartingPoint, string Destination, string Agency, string ContactPerson, string Email, string PhoneNo, string Services) {
            if ((StartingPoint == null)) {
                throw new System.ArgumentNullException("StartingPoint");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(StartingPoint));
            }
            if ((Destination == null)) {
                throw new System.ArgumentNullException("Destination");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Destination));
            }
            if ((Agency == null)) {
                throw new System.ArgumentNullException("Agency");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Agency));
            }
            if ((ContactPerson == null)) {
                throw new System.ArgumentNullException("ContactPerson");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ContactPerson));
            }
            if ((Email == null)) {
                throw new System.ArgumentNullException("Email");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Email));
            }
            if ((PhoneNo == null)) {
                throw new System.ArgumentNullException("PhoneNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(PhoneNo));
            }
            if ((Services == null)) {
                throw new System.ArgumentNullException("Services");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Services));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591